#+TITLE: udwt 

#+BEGIN_SRC julia :session *UDWT_session*
using Revise
using DirectConvolution
using Plots

signal=readcsv("../docs/data/Maldi_ToF.txt");
signal=signal[:,2];
nothing
#+END_SRC

#+RESULTS:

#+BEGIN_SRC julia :session *UDWT_session* :results graphics :file signal.png :exports both
p_signal = plot(signal);
savefig(p_signal,"signal.png")
#+END_SRC

#+RESULTS:
[[file:signal.png]]

#+BEGIN_SRC julia :session *UDWT_session* :results graphics :file W.png :exports both
filter = UDWT_Filter_Starck2{Float64}()
m = udwt(signal,filter,scale=8)
label=["W$i" for i in 1:scale(m)];
p_W=plot(m.W,label=reshape(label,1,scale(m)))
p_V=plot!(m.V,label="V$(scale(m))");
p_W=plot!(signal,label="signal");
savefig(p_W,"W.png")
#+END_SRC

#+RESULTS:
[[file:W.png]]




#+BEGIN_SRC julia :session *UDWT_session* :results graphics :file V.png :exports both
m.W[:,1] .= 0
m.W[:,2] .= 0
reconst=inverse_udwt(m)
p_V=plot(signal,label="signal");
p_V=plot(reconst,label="reconst",linewidth=2);
savefig(p_V,"V.png")
#+END_SRC

#+RESULTS:
[[file:V.png]]

#+BEGIN_SRC julia :session *UDWT_session* :results graphics :file V.png :exports both
p_V=plot(m.V);
p_V=plot!(signal,label="signal");
savefig(p_V,"V.png")
#+END_SRC

#+RESULTS:
[[file:V.png]]

#+BEGIN_SRC julia :session *UDWT_session* :results output
reconst = inverse_udwt(m);
norm(signal-reconst)
#+END_SRC


#+BEGIN_SRC julia :session *UDWT_session* :results output
["$i" for i in 1:4]
#+END_SRC

#+RESULTS:
: 4-element Array{String,1}:
:  "1"
:  "2"
:  "3"
:  "4"


#+BEGIN_SRC julia :session *UDWT_session* :results graphics :file recons.png :exports both
p=plot(reconst);
p=plot!(signal,label="signal");
savefig(p,"recons.png")
#+END_SRC

#+RESULTS:
[[file:recons.png]]

#+BEGIN_SRC julia :session *UDWT_session* :results output
#abs2(m.W)
s1=norm(m.W)^2
s2=norm(signal)^2
s2/s1
#+END_SRC

#+RESULTS:
#+begin_example



ERROR: MethodError: no method matching start(::Void)
Closest candidates are:
  start(!Matched::SimpleVector) at essentials.jl:258
  start(!Matched::Base.MethodList) at reflection.jl:560
  start(!Matched::ExponentialBackOff) at error.jl:107
  ...
Stacktrace:
 [1] #writedlm#18(::Array{Any,1}, ::Function, ::IOStream, ::Void, ::Char) at ./datafmt.jl:673
 [2] #20 at ./datafmt.jl:683 [inlined]
 [3] open(::Base.DataFmt.##20#21{Array{Any,1},Void,Char}, ::String, ::String) at ./iostream.jl:152
 [4] #writecsv#23(::Array{Any,1}, ::Function, ::String, ::Void) at ./datafmt.jl:705
 [5] writecsv(::String, ::Void) at ./datafmt.jl:705

1.6660332403595524e6
2.1187991e7
12.717628008086649
#+end_example
