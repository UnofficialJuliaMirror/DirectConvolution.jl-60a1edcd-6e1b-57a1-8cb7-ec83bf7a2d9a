#+SETUPFILE: ./Setup/setupFile.org
#+TITLE: Direct Convolution Package
#+PROPERTY: header-args:julia :session *directConvolution_session*  :exports code :eval no-export
#+LATEX_HEADER: \usepackage{stmaryrd}

#+BEGIN_EXPORT latex
\definecolor{bg}{rgb}{0.95,0.95,0.95}
\setminted[]{
  bgcolor=bg,
  breaklines=true,
  breakanywhere=true,
  mathescape,
  fontsize=\footnotesize}
#+END_EXPORT

#+BEGIN_SRC julia :exports none
using Revise
using DirectConvolution
using J4Org

initialize_boxing_module(usedModules=["DirectConvolution"])
#+END_SRC

#+RESULTS:

* Introduction

This package goal is to compute convolution products 

\begin{equation}
\label{eq:main}
\gamma[k]=\sum\limits_{i\in\Omega^\alpha}\alpha[i]\beta[k+\lambda i],\text{ with }\lambda\in\mathbb{Z}^*
\end{equation}

using direct (no FFT) methods. 

* API documentation
** Linear Filter

#+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="LinearFilter",tag_to_ignore="Internal",header_level=0)
#+END_SRC

#+RESULTS:
:RESULTS:

<<WT37mMJJ>> *Index:* *[L]* [[TXPF9E3M][LinearFilter]] *[f]* [[8JSxpx45][fcoef]] *[l]* [[qVbofs6N][length]] *[o]* [[al2mTCj5][offset]] *[r]* [[m22Hn06b][range]] 
- @@latex:\phantomsection@@ *=LinearFilter=*  <<TXPF9E3M>> <<2w2iet0qLinearFilter>>
#+BEGIN_SRC julia :eval never :exports code
abstract type LinearFilter{T<:Number} 
#+END_SRC
#+BEGIN_QUOTE
Abstract type defining a linear filter. A linear filter is defined by its coefficients and by its domain
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::7][linearFilter.jl:7]], [[WT37mMJJ][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function LinearFilter(c::AbstractArray{T,1},offset::Int)::LinearFilter  where {T}
#+END_SRC
#+BEGIN_QUOTE
Creates a linear filter from its coefficients and an offset

The *offset* is the position of the filter coefficient to be aligned with zero, see [[2w2iet0qrange_filter][range(...)]].

*Example:*
#+BEGIN_SRC julia
f=LinearFilter([0:5;],4);
hcat([range(f);],fcoef(f))
#+END_SRC
#+BEGIN_SRC julia
6×2 Array{Int64,2}:
 -4  0
 -3  1
 -2  2
 -1  3
  0  4
  1  5
#+END_SRC
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::95][linearFilter.jl:95]], [[WT37mMJJ][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function LinearFilter(c::AbstractArray{T,1})::LinearFilter  where {T}
#+END_SRC
#+BEGIN_QUOTE
Create a centered linear filter, it must have an odd number, $2n+1$
of coefficients and is centered (offset=n)

*Example:*
#+BEGIN_SRC julia
f=LinearFilter([0:4;]);
hcat([range(f);],fcoef(f))
#+END_SRC
#+BEGIN_SRC julia
5×2 Array{Int64,2}:
 -2  0
 -1  1
  0  2
  1  3
  2  4
#+END_SRC
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::109][linearFilter.jl:109]], [[WT37mMJJ][back to index]]
- @@latex:\phantomsection@@ *=fcoef=*  <<8JSxpx45>>
#+BEGIN_SRC julia :eval never :exports code
fcoef(c::LinearFilter)
#+END_SRC
#+BEGIN_QUOTE
Returns filter coefficients
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::13][linearFilter.jl:13]], [[WT37mMJJ][back to index]]
- @@latex:\phantomsection@@ *=length=*  <<qVbofs6N>>
#+BEGIN_SRC julia :eval never :exports code
length(c::LinearFilter)::Int
#+END_SRC
#+BEGIN_QUOTE
Returns filter length
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::17][linearFilter.jl:17]], [[WT37mMJJ][back to index]]
- @@latex:\phantomsection@@ *=offset=*  <<al2mTCj5>>
#+BEGIN_SRC julia :eval never :exports code
offset(c::LinearFilter)::Int
#+END_SRC
#+BEGIN_QUOTE
Returns filter offset

*Caveat:* the first position is *0* (and not *1*)

See: [[2w2iet0qrange_filter][range(...)]]
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::20][linearFilter.jl:20]], [[WT37mMJJ][back to index]]
- @@latex:\phantomsection@@ *=range=*  <<m22Hn06b>> <<2w2iet0qrange_filter>>
#+BEGIN_SRC julia :eval never :exports code
range(c::LinearFilter)::UnitRange
#+END_SRC
#+BEGIN_QUOTE
Returns filter range $\Omega$

Filter support is defined by
$$
\Omega_\alpha = [ -\text{offset}(\alpha) , \text{size}(\alpha) -\text{offset}(\alpha)  - 1 ]
$$
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::27][linearFilter.jl:27]], [[WT37mMJJ][back to index]]
:END:


** Convolution functions

These are the main functions of the package, allowing to compute Eq. \ref{eq:main}.

*** Boundary extensions

 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="BoundaryExtension",header_level=0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:

 <<kiqtF1ZU>> *Index:* *[B]* [[sGGNOkva][BoundaryExtension]] *[C]* [[s36QCK0r][ConstantBE]] *[M]* [[fEW6Q5gv][MirrorBE]] *[P]* [[9QnGmkO9][PeriodicBE]] *[Z]* [[IeuY8RHZ][ZeroPaddingBE]] *[b]* [[qIJeac15][boundaryExtension]] *[c]* [[A50Rg1go][compute_Ωγ1]] *[r]* [[Ky99Iynd][relativeComplement_left]], [[dAgumONO][relativeComplement_right]] *[s]* [[EbiJdpfx][scale]] 
 - @@latex:\phantomsection@@ *=BoundaryExtension=*  <<sGGNOkva>>
 #+BEGIN_SRC julia :eval never :exports code
 abstract type BoundaryExtension 
 #+END_SRC
 #+BEGIN_QUOTE
 Used for tag dispatching, parent of available boundary extensions

 #+BEGIN_SRC julia
 subtypes(BoundaryExtension)
 #+END_SRC
 #+BEGIN_SRC julia
 4-element Array{Union{DataType, UnionAll},1}:
  DirectConvolution.ConstantBE   
  DirectConvolution.MirrorBE     
  DirectConvolution.PeriodicBE   
  DirectConvolution.ZeroPaddingBE
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::11][directConvolution.jl:11]], [[kiqtF1ZU][back to index]]
 - @@latex:\phantomsection@@ *=ConstantBE=*  <<s36QCK0r>>
 #+BEGIN_SRC julia :eval never :exports code
 struct ConstantBE <: BoundaryExtension
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::21][directConvolution.jl:21]], [[kiqtF1ZU][back to index]]
 - @@latex:\phantomsection@@ *=MirrorBE=*  <<fEW6Q5gv>>
 #+BEGIN_SRC julia :eval never :exports code
 struct MirrorBE <: BoundaryExtension
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::25][directConvolution.jl:25]], [[kiqtF1ZU][back to index]]
 - @@latex:\phantomsection@@ *=PeriodicBE=*  <<9QnGmkO9>>
 #+BEGIN_SRC julia :eval never :exports code
 struct PeriodicBE <: BoundaryExtension
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::23][directConvolution.jl:23]], [[kiqtF1ZU][back to index]]
 - @@latex:\phantomsection@@ *=ZeroPaddingBE=*  <<IeuY8RHZ>>
 #+BEGIN_SRC julia :eval never :exports code
 struct ZeroPaddingBE <: BoundaryExtension
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::19][directConvolution.jl:19]], [[kiqtF1ZU][back to index]]
 - @@latex:\phantomsection@@ *=boundaryExtension=*  <<qIJeac15>>
 #+BEGIN_SRC julia :eval never :exports code
 function boundaryExtension(β::AbstractArray{T,1},
			    k::Int,
			    ::Type{ZeroPaddingBE}) where {T <: Number}
 #+END_SRC
 #+BEGIN_QUOTE
 #+BEGIN_SRC julia
 r=-5:10
 hcat(r,map(x->DirectConvolution.boundaryExtension([1:3;],x,ZeroPaddingBE),r))'
 #+END_SRC
 #+BEGIN_SRC julia
 -5:10
 2×16 Array{Int64,2}:
  -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10
   0   0   0   0   0  0  1  2  3  0  0  0  0  0  0   0
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::109][directConvolution.jl:109]], [[kiqtF1ZU][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 function boundaryExtension(β::AbstractArray{T,1},
			    k::Int,
			    ::Type{ConstantBE}) where {T <: Number}
 #+END_SRC
 #+BEGIN_QUOTE
 #+BEGIN_SRC julia
 r=-5:10
 hcat(r,map(x->DirectConvolution.boundaryExtension([1:3;],x,ConstantBE),r))'
 #+END_SRC
 #+BEGIN_SRC julia
 -5:10
 2×16 Array{Int64,2}:
  -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10
   1   1   1   1   1  1  1  2  3  3  3  3  3  3  3   3
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::127][directConvolution.jl:127]], [[kiqtF1ZU][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 function boundaryExtension(β::AbstractArray{T,1},
			    k::Int,
			    ::Type{PeriodicBE}) where {T <: Number}
 #+END_SRC
 #+BEGIN_QUOTE
 #+BEGIN_SRC julia
 r=-5:10
 hcat(r,map(x->DirectConvolution.boundaryExtension([1:3;],x,PeriodicBE),r))'
 #+END_SRC
 #+BEGIN_SRC julia
 -5:10
 2×16 Array{Int64,2}:
  -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10
   1   2   3   1   2  3  1  2  3  1  2  3  1  2  3   1
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::147][directConvolution.jl:147]], [[kiqtF1ZU][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 function boundaryExtension(β::AbstractArray{T,1},
			    k::Int,
			    ::Type{MirrorBE}) where {T <: Number}
 #+END_SRC
 #+BEGIN_QUOTE
 #+BEGIN_SRC julia
 r=-5:10
 hcat(r,map(x->DirectConvolution.boundaryExtension([1:3;],x,MirrorBE),r))'
 #+END_SRC
 #+BEGIN_SRC julia
 -5:10
 2×16 Array{Int64,2}:
  -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10
   3   2   1   2   3  2  1  2  3  2  1  2  3  2  1   2
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::161][directConvolution.jl:161]], [[kiqtF1ZU][back to index]]
 - @@latex:\phantomsection@@ *=compute_Ωγ1=*  <<A50Rg1go>>
 #+BEGIN_SRC julia :eval never :exports code
 function compute_Ωγ1(Ωα::UnitRange{Int},
		      λ::Int,
		      Ωβ::UnitRange{Int})
 #+END_SRC
 #+BEGIN_QUOTE
 In
 $$
 \gamma[k]=\sum\limits_{i\in\Omega^\alpha}\alpha[i]\beta[k+\lambda i],\text{ with }\lambda\in\mathbb{Z}^*
 $$
 the computation of $\gamma[k],\ k\in\Omega^\gamma$ is splitted into two parts:  
  - one part $\Omega^\gamma \cap \Omega^\gamma_1$ *free of boundary effect*,  
  - one part $\Omega^\gamma \setminus \Omega^\gamma_1$ *that requires boundary extension* $\tilde{\beta}=\Phi(\beta,k)$

 *Example:*
 #+BEGIN_SRC julia
 DirectConvolution.compute_Ωγ1(-1:2,-2,1:20)
 #+END_SRC
 #+BEGIN_SRC julia
 5:18
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::47][directConvolution.jl:47]], [[kiqtF1ZU][back to index]]
 - @@latex:\phantomsection@@ *=relativeComplement_left=*  <<Ky99Iynd>>
 #+BEGIN_SRC julia :eval never :exports code
 function relativeComplement_left(A::UnitRange{Int},
				  B::UnitRange{Int})
 #+END_SRC
 #+BEGIN_QUOTE
 Left relative complement

 $$
 (A\setminus B)_{\text{Left}}=[  l(A), \min{(u(A),l(B)-1)} ]
 $$

 *Example:*
 #+BEGIN_SRC julia
 DirectConvolution.relativeComplement_left(1:10,-5:5)
 #+END_SRC
 #+BEGIN_SRC julia
 1:0
 #+END_SRC

 $(A\setminus B)=\{6,7,8,9,10\}$ and the left part (elements that are
 $\in A$ but on the left side of $B$) is *empty*.
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::69][directConvolution.jl:69]], [[kiqtF1ZU][back to index]]
 - @@latex:\phantomsection@@ *=relativeComplement_right=*  <<dAgumONO>>
 #+BEGIN_SRC julia :eval never :exports code
 function relativeComplement_right(A::UnitRange{Int},
				   B::UnitRange{Int})
 #+END_SRC
 #+BEGIN_QUOTE
 Left relative complement

 $$
 (A\setminus B)_{\text{Right}}=[ \max{(l(A),u(B)+1)}, u(A) ]
 $$

 *Example:*
 #+BEGIN_SRC julia
 DirectConvolution.relativeComplement_right(1:10,-5:5)
 #+END_SRC
 #+BEGIN_SRC julia
 6:10
 #+END_SRC

 $(A\setminus B)=\{6,7,8,9,10\}$ and the right part (elements that are
 $\in A$ but on the right side of $B$) are $\{6,7,8,9,10\}$
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::88][directConvolution.jl:88]], [[kiqtF1ZU][back to index]]
 - @@latex:\phantomsection@@ *=scale=*  <<EbiJdpfx>>
 #+BEGIN_SRC julia :eval never :exports code
 function scale(λ::Int,Ω::UnitRange{Int})
 #+END_SRC
 #+BEGIN_QUOTE
 Range scaling

 *Caveat:*
 We do not use Julia =scale= function as it returns a step range:
 #+BEGIN_SRC julia
 r=6:8
 -2*r
 #+END_SRC
 #+BEGIN_SRC julia
 6:8
 -12:-2:-16
 #+END_SRC
 What we need is:
 #+BEGIN_SRC julia
 scale(-2,r)
 #+END_SRC
 #+BEGIN_SRC julia
 -16:-12
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::30][directConvolution.jl:30]], [[kiqtF1ZU][back to index]]
 :END:

*** Convolution computation

 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="Convolution",header_level=0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:

 <<ckVoYYV6>> *Index:* *[d]* [[RmRDMBiL][directConv]], [[fEqO5Ijc][directConv!]] 
 - @@latex:\phantomsection@@ *=directConv=*  <<RmRDMBiL>>
 #+BEGIN_SRC julia :eval never :exports code
 function directConv(α::LinearFilter{T},

		     λ::Int64,

		     β::AbstractArray{T,1},

		     ::Type{LeftBE}=ZeroPaddingBE,
		     ::Type{RightBE}=ZeroPaddingBE) where {T <: Number,
							   LeftBE <: BoundaryExtension,
							   RightBE <: BoundaryExtension}
 #+END_SRC
 #+BEGIN_QUOTE
 Computes a convolution.

 Convenience function that allocate $\gamma$ and compute all its
 component using [[7bvZw9YmdirectConv_details][directConv!(...)]]

 *Returns:* $\gamma$ a created vector of length identical to the $\beta$ one.

 *Example:*
 #+BEGIN_SRC julia
 β=[1:20;];
 γ=ones(Int,15);
 α=LinearFilter([0,0,1],0);
 γ=directConv(α,1,β);
 hcat([1:length(γ);],γ)'
 #+END_SRC
 #+BEGIN_SRC julia
 2×20 Array{Int64,2}:
  1  2  3  4  5  6  7   8   9  10  11  12  13  14  15  16  17  18  19  20
  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20   0   0
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::295][directConvolution.jl:295]], [[ckVoYYV6][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 function directConv(α::LinearFilter{T},
		     β::AbstractArray{T,1},

		     ::Type{LeftBE}=ZeroPaddingBE,
		     ::Type{RightBE}=ZeroPaddingBE) where {T <: Number,
							   LeftBE <: BoundaryExtension,
							   RightBE <: BoundaryExtension}
 #+END_SRC
 #+BEGIN_QUOTE
 Computes a convolution.

 Returns γ, a created vector of length identical to β one.
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::341][directConvolution.jl:341]], [[ckVoYYV6][back to index]]
 - @@latex:\phantomsection@@ *=directConv!=*  <<fEqO5Ijc>>
 #+BEGIN_SRC julia :eval never :exports code
 function directConv!(tilde_α::AbstractArray{T,1},
		      Ωα::UnitRange{Int},
		      λ::Int,
		      β::AbstractArray{T,1},
		      γ::AbstractArray{T,1},
		      Ωγ::UnitRange{Int},
		      ::Type{LeftBE}=ZeroPaddingBE,
		      ::Type{RightBE}=ZeroPaddingBE;
		      accumulate::Bool=false)::Void where {T <: Number,
							   LeftBE <: BoundaryExtension,
							   RightBE <: BoundaryExtension}
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::178][directConvolution.jl:178]], [[ckVoYYV6][back to index]]
  @@latex:\phantomsection@@  <<7bvZw9YmdirectConv_details>>
 #+BEGIN_SRC julia :eval never :exports code
 function directConv!(α::LinearFilter{T},
		      λ::Int,

		      β::AbstractArray{T,1},

		      γ::AbstractArray{T,1},
		      Ωγ::UnitRange{Int},

		      ::Type{LeftBE}=ZeroPaddingBE,
		      ::Type{RightBE}=ZeroPaddingBE;

		      accumulate::Bool=false)::Void where {T <: Number,
							   LeftBE <: BoundaryExtension,
							   RightBE <: BoundaryExtension}
 #+END_SRC
 #+BEGIN_QUOTE
 Computes a convolution.

 Inplace modification of $\gamma[k], k\in\Omega_\gamma$.
 $$
 \gamma[k]=\sum\limits_{i\in\Omega^\alpha}\alpha[i]\beta[k+\lambda i],\text{ with }\lambda\in\mathbb{Z}^*
 $$
 If $k\notin \Omega_\gamma$, $\gamma[k]$ is unmodified.

 If *accumulate=false* then an erasing step $\gamma[k]=0,
 k\in\Omega_\gamma$ is performed before computation.

 If $\lambda=-1$ you compute a convolution, if $\lambda=+1$ you
 compute a cross-correlation.

 *Example:*
 #+BEGIN_SRC julia
 β=[1:20;];
 γ=ones(Int,15);
 α=LinearFilter([0,0,1],0);
 directConv!(α,1,β,γ,5:10);
 hcat([1:length(γ);],γ)'
 #+END_SRC
 #+BEGIN_SRC julia
 2×15 Array{Int64,2}:
  1  2  3  4  5  6  7   8   9  10  11  12  13  14  15
  1  1  1  1  7  8  9  10  11  12   1   1   1   1   1
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::239][directConvolution.jl:239]], [[ckVoYYV6][back to index]]
 :END:

** Undecimated Wavelet Transform
*** UDWT Filters
 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="UDWT_Filter",header_level=0,case_sensitive=true)
 #+END_SRC

 #+RESULTS:
 :RESULTS:

 <<xaRBzB5c>> *Index:* *[U]* [[NoS94uOz][UDWT_Filter]], [[KYpPvL6q][UDWT_Filter_Biorthogonal]], [[oLZwmcOU][UDWT_Filter_Haar]], [[iBHOSEqp][UDWT_Filter_Starck2]] *[e]* [[LynNg4RT][export]] *[t]* [[jkCXR2uw][tildeψ_filter]], [[dZleLxYY][tildeψ_offset]], [[l1dxvaQT][tildeϕ_filter]], [[vQ2cocbW][tildeϕ_offset]] *[ψ]* [[QXjk7AW2][ψ_filter]], [[wbWhrVcA][ψ_offset]] *[ϕ]* [[0bJoJHh8][ϕ_filter]], [[UmzuA3lh][ϕ_offset]] 
 - @@latex:\phantomsection@@ *=UDWT_Filter=*  <<NoS94uOz>>
 #+BEGIN_SRC julia :eval never :exports code
 abstract type UDWT_Filter{T<:Number} <: UDWT_Filter_Biorthogonal{T}
 #+END_SRC
 #+BEGIN_QUOTE
 A specialization of UDWT_Filter_Biorthogonal for *orthogonal* filters.


 For orthogonal filters we have: $\phi=\tilde{\phi}$ and $\psi=\tilde{\psi}$

 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::40][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Biorthogonal=*  <<KYpPvL6q>>
 #+BEGIN_SRC julia :eval never :exports code
 abstract type UDWT_Filter_Biorthogonal{T<:Number} 
 #+END_SRC
 #+BEGIN_QUOTE
 Abstract type defining the $\phi$, $\psi$, $\tilde{\phi}$ and
 $\tilde{\psi}$ filters associated to an undecimated biorthogonal
 wavelet transform

 - [X] TODO must use LinearFilter struct 
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::12][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Haar=*  <<oLZwmcOU>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT_Filter_Haar{T<:AbstractFloat} <: UDWT_Filter{T}
 #+END_SRC
 #+BEGIN_QUOTE
 Haar filter
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::66][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 UDWT_Filter_Haar{T}() where {T<:Real}
 #+END_SRC
 #+BEGIN_QUOTE
 Creates an instance
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::72][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Starck2=*  <<iBHOSEqp>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT_Filter_Starck2{T<:AbstractFloat} <: UDWT_Filter_Biorthogonal{T}
 #+END_SRC
 #+BEGIN_QUOTE
 Starck2 filter

 Defined by Eq. 6 from http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4060954
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::80][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 UDWT_Filter_Starck2{T}() where {T<:Real}
 #+END_SRC
 #+BEGIN_QUOTE
 Creates an instance
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::90][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=export=*  <<LynNg4RT>>
 #+BEGIN_SRC julia :eval never :exports code
 export UDWT_Filter_Haar, UDWT_Filter_Starck2
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::1][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 export ϕ_filter,ψ_filter,tildeϕ_filter,tildeψ_filter,ϕ_offset,ψ_offset,tildeϕ_offset,tildeψ_offset
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::3][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=tildeψ_filter=*  <<jkCXR2uw>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::27][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_filter(c::UDWT_Filter)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::53][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=tildeψ_offset=*  <<dZleLxYY>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::35][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_offset(c::UDWT_Filter)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::59][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=tildeϕ_filter=*  <<l1dxvaQT>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::25][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_filter(c::UDWT_Filter)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::50][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=tildeϕ_offset=*  <<vQ2cocbW>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::33][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_offset(c::UDWT_Filter)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::56][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=ψ_filter=*  <<QXjk7AW2>>
 #+BEGIN_SRC julia :eval never :exports code
 ψ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::23][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=ψ_offset=*  <<wbWhrVcA>>
 #+BEGIN_SRC julia :eval never :exports code
 ψ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::31][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=ϕ_filter=*  <<0bJoJHh8>>
 #+BEGIN_SRC julia :eval never :exports code
 ϕ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::21][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=ϕ_offset=*  <<UmzuA3lh>>
 #+BEGIN_SRC julia :eval never :exports code
 ϕ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::29][udwt.jl]], [[xaRBzB5c][back to index]]
 :END:

*** UDWT Computational subroutines
 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
print_org_doc(documented_items,tag="UDWT",header_level=0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 <<xEAKMX0V>> *Index:* *[E]* [[ZHmsiJXm][export]] *[I]* [[hUsYWLnJ][inverse_udwt]], [[5WeMqHTM][inverse_udwt!]] *[L]* [[h3KB6ht7][length]] *[S]* [[UwUrMPRU][scale]] *[U]* [[iNcRdmm0][UDWT]], [[4Zu0SIpi][udwt]] 
 - @@latex:\phantomsection@@ *=export=*  <<ZHmsiJXm>>
 #+BEGIN_SRC julia :eval never :exports code
 export udwt, scale, inverse_udwt!, inverse_udwt
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::5][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=inverse_udwt=*  <<hUsYWLnJ>>
 #+BEGIN_SRC julia :eval never :exports code
 function inverse_udwt(udwt_domain::UDWT{T})::Array{T,1} where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D *inverse* undecimated wavelet transform

 *Returns:* a vector containing the reconstructed signal.
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::250][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=inverse_udwt!=*  <<5WeMqHTM>>
 #+BEGIN_SRC julia :eval never :exports code
 function inverse_udwt!(udwt_domain::UDWT{T},reconstructed_signal::AbstractArray{T,1}) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D *inverse* undecimated wavelet transform

 *Caveat:* uses a pre-allocated vector =reconstructed_signal=
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::193][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=length=*  <<h3KB6ht7>>
 #+BEGIN_SRC julia :eval never :exports code
 length(udwt::UDWT)::Int
 #+END_SRC
 #+BEGIN_QUOTE
 Returns expected signal length
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::129][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=scale=*  <<UwUrMPRU>>
 #+BEGIN_SRC julia :eval never :exports code
 scale(udwt::UDWT)::Int
 #+END_SRC
 #+BEGIN_QUOTE
 Returns max scale
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::126][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=UDWT=*  <<iNcRdmm0>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT{T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 A structure to store 1D UDWT
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::99][udwt.jl]], [[xEAKMX0V][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 UDWT{T}(filter::UDWT_Filter_Biorthogonal{T};
	     n::Int=0,
	     scale::Int=0) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Creates an instance

 *Parameters:*
 - *filter*: used filter
 - *scale* : max scale
 - *n*: signal length
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::110][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=udwt=*  <<4Zu0SIpi>>
 #+BEGIN_SRC julia :eval never :exports code
 function udwt(signal::AbstractArray{T,1},filter::UDWT_Filter_Biorthogonal{T};scale::Int=3) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D undecimated wavelet transform

 $$(\mathcal{W}_{j+1}f)[u]=(\bar{g}_j*\mathcal{V}_{j}f)[u]$$
 $$(\mathcal{V}_{j+1}f)[u]=(\bar{h}_j*\mathcal{V}_{j}f)[u]$$

 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::133][udwt.jl]], [[xEAKMX0V][back to index]]
 :END:




* Unit tests

#+BEGIN_SRC julia :results output table :exports results
include("/home/picaud/GitHub/DirectConvolution.jl/test/runtests.jl")
#+END_SRC

#+RESULTS:
#+begin_example
Example α_offset: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching directConv!(::StaticArrays.SArray{Tuple{3},Float64,1,3}, ::Int64, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::UnitRange{Int64}, ::Type{DirectConvolution.ZeroPaddingBE}, ::Type{DirectConvolution.ZeroPaddingBE}; accumulate=false)
  Closest candidates are:
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}, ::Type{LeftBE<:DirectConvolution.BoundaryExtension}, ::Type{RightBE<:DirectConvolution.BoundaryExtension}; accumulate) where {T<:Number, LeftBE<:DirectConvolution.BoundaryExtension, RightBE<:DirectConvolution.BoundaryExtension} at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}, ::Type{LeftBE<:DirectConvolution.BoundaryExtension}) where {T<:Number, LeftBE<:DirectConvolution.BoundaryExtension} at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190 got unsupported keyword argument "accumulate"
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}) where T<:Number at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190 got unsupported keyword argument "accumulate"
    ...
  Stacktrace:
   [1] #directConv!#2 at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:274 [inlined]
   [2] (::DirectConvolution.#kw##directConv!)(::Array{Any,1}, ::DirectConvolution.#directConv!, ::DirectConvolution.LinearFilter_Default{Float64,3}, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::UnitRange{Int64}, ::Type{DirectConvolution.ZeroPaddingBE}, ::Type{DirectConvolution.ZeroPaddingBE}) at ./<missing>:0
   [3] directConv(::DirectConvolution.LinearFilter_Default{Float64,3}, ::Int64, ::Array{Float64,1}, ::Type{DirectConvolution.ZeroPaddingBE}, ::Type{DirectConvolution.ZeroPaddingBE}) at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:322
   [4] macro expansion at /home/picaud/GitHub/DirectConvolution.jl/test/directConvolution.jl:6 [inlined]
   [5] macro expansion at ./test.jl:860 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:576
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/picaud/GitHub/DirectConvolution.jl/test/runtests.jl:10 [inlined]
   [10] macro expansion at ./test.jl:860 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:576
   [13] include(::String) at ./sysimg.jl:14
   [14] eval(::Module, ::Any) at ./boot.jl:235
   [15] eval_user_input(::Any, ::Base.REPL.REPLBackend) at ./REPL.jl:66
   [16] macro expansion at ./REPL.jl:97 [inlined]
   [17] (::Base.REPL.##1#2{Base.REPL.REPLBackend})() at ./event.jl:73
Adjoint operator: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching directConv!(::StaticArrays.SArray{Tuple{4},Float64,1,4}, ::Int64, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::UnitRange{Int64}, ::Type{DirectConvolution.ZeroPaddingBE}, ::Type{DirectConvolution.ZeroPaddingBE}; accumulate=false)
  Closest candidates are:
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}, ::Type{LeftBE<:DirectConvolution.BoundaryExtension}, ::Type{RightBE<:DirectConvolution.BoundaryExtension}; accumulate) where {T<:Number, LeftBE<:DirectConvolution.BoundaryExtension, RightBE<:DirectConvolution.BoundaryExtension} at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}, ::Type{LeftBE<:DirectConvolution.BoundaryExtension}) where {T<:Number, LeftBE<:DirectConvolution.BoundaryExtension} at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190 got unsupported keyword argument "accumulate"
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}) where T<:Number at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190 got unsupported keyword argument "accumulate"
    ...
  Stacktrace:
   [1] #directConv!#2 at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:274 [inlined]
   [2] (::DirectConvolution.#kw##directConv!)(::Array{Any,1}, ::DirectConvolution.#directConv!, ::DirectConvolution.LinearFilter_Default{Float64,4}, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::UnitRange{Int64}, ::Type{DirectConvolution.ZeroPaddingBE}, ::Type{DirectConvolution.ZeroPaddingBE}) at ./<missing>:0
   [3] directConv(::DirectConvolution.LinearFilter_Default{Float64,4}, ::Int64, ::Array{Float64,1}, ::Type{DirectConvolution.ZeroPaddingBE}, ::Type{DirectConvolution.ZeroPaddingBE}) at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:322
   [4] macro expansion at /home/picaud/GitHub/DirectConvolution.jl/test/directConvolution.jl:21 [inlined]
   [5] macro expansion at ./test.jl:860 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:576
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/picaud/GitHub/DirectConvolution.jl/test/runtests.jl:10 [inlined]
   [10] macro expansion at ./test.jl:860 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:576
   [13] include(::String) at ./sysimg.jl:14
   [14] eval(::Module, ::Any) at ./boot.jl:235
   [15] eval_user_input(::Any, ::Base.REPL.REPLBackend) at ./REPL.jl:66
   [16] macro expansion at ./REPL.jl:97 [inlined]
   [17] (::Base.REPL.##1#2{Base.REPL.REPLBackend})() at ./event.jl:73
Convolution commutativity: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching directConv!(::Array{Float64,1}, ::Int64, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::UnitRange{Int64}, ::Type{DirectConvolution.ZeroPaddingBE}, ::Type{DirectConvolution.ZeroPaddingBE})
  Closest candidates are:
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}, ::Type{LeftBE<:DirectConvolution.BoundaryExtension}, ::Type{RightBE<:DirectConvolution.BoundaryExtension}; accumulate) where {T<:Number, LeftBE<:DirectConvolution.BoundaryExtension, RightBE<:DirectConvolution.BoundaryExtension} at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}, ::Type{LeftBE<:DirectConvolution.BoundaryExtension}) where {T<:Number, LeftBE<:DirectConvolution.BoundaryExtension} at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}) where T<:Number at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190
    ...
  Stacktrace:
   [1] macro expansion at /home/picaud/GitHub/DirectConvolution.jl/test/directConvolution.jl:42 [inlined]
   [2] macro expansion at ./test.jl:860 [inlined]
   [3] anonymous at ./<missing>:?
   [4] include_from_node1(::String) at ./loading.jl:576
   [5] include(::String) at ./sysimg.jl:14
   [6] macro expansion at /home/picaud/GitHub/DirectConvolution.jl/test/runtests.jl:10 [inlined]
   [7] macro expansion at ./test.jl:860 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:576
   [10] include(::String) at ./sysimg.jl:14
   [11] eval(::Module, ::Any) at ./boot.jl:235
   [12] eval_user_input(::Any, ::Base.REPL.REPLBackend) at ./REPL.jl:66
   [13] macro expansion at ./REPL.jl:97 [inlined]
   [14] (::Base.REPL.##1#2{Base.REPL.REPLBackend})() at ./event.jl:73
Interval split: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching directConv!(::StaticArrays.SArray{Tuple{4},Float64,1,4}, ::Int64, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::UnitRange{Int64}, ::Type{DirectConvolution.MirrorBE}, ::Type{DirectConvolution.PeriodicBE}; accumulate=false)
  Closest candidates are:
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}, ::Type{LeftBE<:DirectConvolution.BoundaryExtension}, ::Type{RightBE<:DirectConvolution.BoundaryExtension}; accumulate) where {T<:Number, LeftBE<:DirectConvolution.BoundaryExtension, RightBE<:DirectConvolution.BoundaryExtension} at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}, ::Type{LeftBE<:DirectConvolution.BoundaryExtension}) where {T<:Number, LeftBE<:DirectConvolution.BoundaryExtension} at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190 got unsupported keyword argument "accumulate"
    directConv!(::AbstractArray{T<:Number,1}, !Matched::UnitRange{Int64}, ::Int64, ::AbstractArray{T<:Number,1}, ::AbstractArray{T<:Number,1}, ::UnitRange{Int64}) where T<:Number at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:190 got unsupported keyword argument "accumulate"
    ...
  Stacktrace:
   [1] #directConv!#2 at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:274 [inlined]
   [2] (::DirectConvolution.#kw##directConv!)(::Array{Any,1}, ::DirectConvolution.#directConv!, ::DirectConvolution.LinearFilter_Default{Float64,4}, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::UnitRange{Int64}, ::Type{DirectConvolution.MirrorBE}, ::Type{DirectConvolution.PeriodicBE}) at ./<missing>:0
   [3] directConv(::DirectConvolution.LinearFilter_Default{Float64,4}, ::Int64, ::Array{Float64,1}, ::Type{DirectConvolution.MirrorBE}, ::Type{DirectConvolution.PeriodicBE}) at /home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl:322
   [4] macro expansion at /home/picaud/GitHub/DirectConvolution.jl/test/directConvolution.jl:56 [inlined]
   [5] macro expansion at ./test.jl:860 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:576
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/picaud/GitHub/DirectConvolution.jl/test/runtests.jl:10 [inlined]
   [10] macro expansion at ./test.jl:860 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:576
   [13] include(::String) at ./sysimg.jl:14
   [14] eval(::Module, ::Any) at ./boot.jl:235
   [15] eval_user_input(::Any, ::Base.REPL.REPLBackend) at ./REPL.jl:66
   [16] macro expansion at ./REPL.jl:97 [inlined]
   [17] (::Base.REPL.##1#2{Base.REPL.REPLBackend})() at ./event.jl:73
UDWT Transform: Error During Test
  Got an exception of type BoundsError outside of a @test
  BoundsError: attempt to access 2-element Array{DirectConvolution.UDWT_Filter_Biorthogonal{Float64},1} at index [-1]
  Stacktrace:
   [1] setindex!(::Array{DirectConvolution.UDWT_Filter_Biorthogonal{Float64},1}, ::DirectConvolution.UDWT_Filter_Haar{Float64}, ::UnitRange{Int64}) at ./array.jl:591
   [2] _cat(::Array{DirectConvolution.UDWT_Filter_Biorthogonal{Float64},1}, ::Tuple{Int64}, ::Tuple{Bool}, ::DirectConvolution.UDWT_Filter_Haar{Float64}, ::Vararg{Any,N} where N) at ./abstractarray.jl:1225
   [3] cat_t(::Type{T} where T, ::Type{T} where T, ::DirectConvolution.UDWT_Filter_Haar{Float64}, ::Vararg{Any,N} where N) at ./abstractarray.jl:1208
   [4] macro expansion at /home/picaud/GitHub/DirectConvolution.jl/test/udwt.jl:28 [inlined]
   [5] macro expansion at ./test.jl:860 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:576
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/picaud/GitHub/DirectConvolution.jl/test/runtests.jl:14 [inlined]
   [10] macro expansion at ./test.jl:860 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:576
   [13] include(::String) at ./sysimg.jl:14
   [14] eval(::Module, ::Any) at ./boot.jl:235
   [15] eval_user_input(::Any, ::Base.REPL.REPLBackend) at ./REPL.jl:66
   [16] macro expansion at ./REPL.jl:97 [inlined]
   [17] (::Base.REPL.##1#2{Base.REPL.REPLBackend})() at ./event.jl:73
Test Summary:                  | Pass  Error  Total
DirectConvolution              |   25      5     30
  swap                         |    4             4
  LinearFilter_DefaultCentered |    3             3
  LinearFilter_Default         |    4             4
  Example α_offset             |           1      1
  Adjoint operator             |           1      1
  Convolution commutativity    |           1      1
  Interval split               |           1      1
  Savitzky-Golay               |    6             6
  Haar                         |    6             6
  Starck2                      |    2             2
  UDWT Transform               |           1      1
ERROR: LoadError: Some tests did not pass: 25 passed, 0 failed, 5 errored, 0 broken.
while loading /home/picaud/GitHub/DirectConvolution.jl/test/runtests.jl, in expression starting on line 4
#+end_example


