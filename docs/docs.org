#+SETUPFILE: ./Setup/setupFile.org
#+TITLE: Direct Convolution Package
#+PROPERTY: header-args:julia :session *directConvolution_session*  :exports code :eval no-export
#+LATEX_HEADER: \usepackage{stmaryrd}

#+BEGIN_EXPORT latex
\definecolor{bg}{rgb}{0.95,0.95,0.95}
\setminted[]{
  bgcolor=bg,
  breaklines=true,
  breakanywhere=true,
  mathescape,
  fontsize=\footnotesize}
#+END_EXPORT

#+BEGIN_SRC julia :exports none
using Revise
using DirectConvolution
using J4Org

initialize_boxing_module(usedModules=["DirectConvolution"])
#+END_SRC

#+RESULTS:

* Introduction

This package goal is to compute convolution products 

\begin{equation}
\label{eq:main}
\gamma[k]=\sum\limits_{i\in\Omega^\alpha}\alpha[i]\beta[k+\lambda i],\text{ with }\lambda\in\mathbb{Z}^*
\end{equation}

#+ATTR_HTML: :align center :width 600px
file:~/GitHub/DirectConvolution.jl/docs/figures/a_offset.png

using direct (no FFT) methods. 

* API documentation
** Linear Filter

#+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="LinearFilter",tag_to_ignore="Internal",header_level=0)
#+END_SRC

#+RESULTS:
:RESULTS:

<<nMICHM7D>> *Index:* *[L]* [[dLJRU9IP][LinearFilter]] *[f]* [[S8BP6OmH][fcoef]] *[l]* [[rWCOm2M2][length]] *[o]* [[X4ckbtuT][offset]] *[r]* [[ofxA49c4][range]] 
- @@latex:\phantomsection@@ *=LinearFilter=*  <<dLJRU9IP>> <<XwjZTdNuLinearFilter>>
#+BEGIN_SRC julia :eval never :exports code
abstract type LinearFilter{T<:Number} 
#+END_SRC
#+BEGIN_QUOTE
Abstract type defining a linear filter. A linear filter is defined by its coefficients and by its domain
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::7][linearFilter.jl:7]], [[nMICHM7D][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function LinearFilter(c::AbstractArray{T,1},offset::Int)::LinearFilter  where {T}
#+END_SRC
#+BEGIN_QUOTE
Creates a linear filter from its coefficients and an offset

The *offset* is the position of the filter coefficient to be aligned with zero, see [[XwjZTdNurange_filter][range(...)]].

*Example:*
#+BEGIN_SRC julia
f=LinearFilter([0:5;],4);
hcat([range(f);],fcoef(f))
#+END_SRC
#+BEGIN_SRC julia
6×2 Array{Int64,2}:
 -4  0
 -3  1
 -2  2
 -1  3
  0  4
  1  5
#+END_SRC
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::104][linearFilter.jl:104]], [[nMICHM7D][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function LinearFilter(c::AbstractArray{T,1})::LinearFilter  where {T}
#+END_SRC
#+BEGIN_QUOTE
Creates a centered linear filter, it must have an odd number of
coefficients, $2n+1$ and is centered by construction (offset=n)

*Example:*
#+BEGIN_SRC julia
f=LinearFilter([0:4;]);
hcat([range(f);],fcoef(f))
#+END_SRC
#+BEGIN_SRC julia
5×2 Array{Int64,2}:
 -2  0
 -1  1
  0  2
  1  3
  2  4
#+END_SRC
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::118][linearFilter.jl:118]], [[nMICHM7D][back to index]]
- @@latex:\phantomsection@@ *=fcoef=*  <<S8BP6OmH>>
#+BEGIN_SRC julia :eval never :exports code
fcoef(c::LinearFilter)
#+END_SRC
#+BEGIN_QUOTE
Returns filter coefficients
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::13][linearFilter.jl:13]], [[nMICHM7D][back to index]]
- @@latex:\phantomsection@@ *=length=*  <<rWCOm2M2>>
#+BEGIN_SRC julia :eval never :exports code
length(c::LinearFilter)::Int
#+END_SRC
#+BEGIN_QUOTE
Returns filter length
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::17][linearFilter.jl:17]], [[nMICHM7D][back to index]]
- @@latex:\phantomsection@@ *=offset=*  <<X4ckbtuT>>
#+BEGIN_SRC julia :eval never :exports code
offset(c::LinearFilter)::Int
#+END_SRC
#+BEGIN_QUOTE
Returns filter offset

*Caveat:* the first position is *0* (and not *1*)

See: [[XwjZTdNurange_filter][range(...)]]
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::20][linearFilter.jl:20]], [[nMICHM7D][back to index]]
- @@latex:\phantomsection@@ *=range=*  <<ofxA49c4>> <<XwjZTdNurange_filter>>
#+BEGIN_SRC julia :eval never :exports code
range(c::LinearFilter)::UnitRange
#+END_SRC
#+BEGIN_QUOTE
Returns filter range $\Omega$

Filter support is defined by
$$
\Omega_\alpha = [ -\text{offset}(\alpha) , \text{size}(\alpha) -\text{offset}(\alpha)  - 1 ]
$$
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::36][linearFilter.jl:36]], [[nMICHM7D][back to index]]
:END:

** Convolution functions

These are the main functions of the package, allowing to compute Eq. \ref{eq:main}.

*** Boundary extensions

 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="BoundaryExtension",tag_to_ignore="Internal",header_level=0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:

 <<Pu1iqLCD>> *Index:* *[B]* [[kv71WoJs][BoundaryExtension]] *[C]* [[g6PekjsT][ConstantBE]] *[M]* [[Rm39FEz6][MirrorBE]] *[P]* [[D2zpgVmu][PeriodicBE]] *[Z]* [[54yHCGh4][ZeroPaddingBE]] 
 - @@latex:\phantomsection@@ *=BoundaryExtension=*  <<kv71WoJs>>
 #+BEGIN_SRC julia :eval never :exports code
 abstract type BoundaryExtension 
 #+END_SRC
 #+BEGIN_QUOTE
 Used for tag dispatching, parent of available boundary extensions

 #+BEGIN_SRC julia
 subtypes(BoundaryExtension)
 #+END_SRC
 #+BEGIN_SRC julia
 4-element Array{Union{DataType, UnionAll},1}:
  DirectConvolution.ConstantBE   
  DirectConvolution.MirrorBE     
  DirectConvolution.PeriodicBE   
  DirectConvolution.ZeroPaddingBE
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::11][directConvolution.jl:11]], [[Pu1iqLCD][back to index]]
 - @@latex:\phantomsection@@ *=ConstantBE=*  <<g6PekjsT>>
 #+BEGIN_SRC julia :eval never :exports code
 struct ConstantBE <: BoundaryExtension
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::21][directConvolution.jl:21]], [[Pu1iqLCD][back to index]]
 - @@latex:\phantomsection@@ *=MirrorBE=*  <<Rm39FEz6>>
 #+BEGIN_SRC julia :eval never :exports code
 struct MirrorBE <: BoundaryExtension
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::25][directConvolution.jl:25]], [[Pu1iqLCD][back to index]]
 - @@latex:\phantomsection@@ *=PeriodicBE=*  <<D2zpgVmu>>
 #+BEGIN_SRC julia :eval never :exports code
 struct PeriodicBE <: BoundaryExtension
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::23][directConvolution.jl:23]], [[Pu1iqLCD][back to index]]
 - @@latex:\phantomsection@@ *=ZeroPaddingBE=*  <<54yHCGh4>>
 #+BEGIN_SRC julia :eval never :exports code
 struct ZeroPaddingBE <: BoundaryExtension
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::19][directConvolution.jl:19]], [[Pu1iqLCD][back to index]]
 :END:

*** Convolution computation

 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="Convolution",tag_to_ignore="Internal",header_level=0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:

 <<oZDHUwvU>> *Index:* *[d]* [[wIB7mSQu][directConv]], [[phY5SPkS][directConv!]], [[HKnWx24U][directCrossCorrelation]] 
 - @@latex:\phantomsection@@ *=directConv=*  <<wIB7mSQu>>
 #+BEGIN_SRC julia :eval never :exports code
 function directConv(α::LinearFilter{T},

		     λ::Int64,

		     β::AbstractArray{T,1},

		     ::Type{LeftBE}=ZeroPaddingBE,
		     ::Type{RightBE}=ZeroPaddingBE) where {T <: Number,
							   LeftBE <: BoundaryExtension,
							   RightBE <: BoundaryExtension}
 #+END_SRC
 #+BEGIN_QUOTE
 Computes a convolution.

 Convenience function that allocate $\gamma$ and compute all its
 component using [[IJuGX6m5directConv_details][directConv!(...)]]

 *Returns:* $\gamma$ a created vector of length identical to the $\beta$ one.

 *Example:*
 #+BEGIN_SRC julia
 β=[1:15;];
 γ=ones(Int,15);
 α=LinearFilter([0,0,1],0);
 γ=directConv(α,1,β);
 hcat([1:length(γ);],γ)'
 #+END_SRC
 #+BEGIN_SRC julia
 2×15 Array{Int64,2}:
  1  2  3  4  5  6  7   8   9  10  11  12  13  14  15
  3  4  5  6  7  8  9  10  11  12  13  14  15   0   0
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::296][directConvolution.jl:296]], [[oZDHUwvU][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 function directConv(α::LinearFilter{T},
		     β::AbstractArray{T,1},

		     ::Type{LeftBE}=ZeroPaddingBE,
		     ::Type{RightBE}=ZeroPaddingBE) where {T <: Number,
							   LeftBE <: BoundaryExtension,
							   RightBE <: BoundaryExtension}
 #+END_SRC
 #+BEGIN_QUOTE
 Computes a convolution.

 This is a convenience function where $\lambda=-1$

 *Returns:* $\gamma$ a created vector of length identical to the $\beta$ one.
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::342][directConvolution.jl:342]], [[oZDHUwvU][back to index]]
 - @@latex:\phantomsection@@ *=directConv!=*  <<phY5SPkS>> <<IJuGX6m5directConv_details>>
 #+BEGIN_SRC julia :eval never :exports code
 function directConv!(α::LinearFilter{T},
		      λ::Int,

		      β::AbstractArray{T,1},

		      γ::AbstractArray{T,1},
		      Ωγ::UnitRange{Int},

		      ::Type{LeftBE}=ZeroPaddingBE,
		      ::Type{RightBE}=ZeroPaddingBE;

		      accumulate::Bool=false)::Void where {T <: Number,
							   LeftBE <: BoundaryExtension,
							   RightBE <: BoundaryExtension}
 #+END_SRC
 #+BEGIN_QUOTE
 Computes a convolution.

 Inplace modification of $\gamma[k], k\in\Omega_\gamma$.
 $$
 \gamma[k]=\sum\limits_{i\in\Omega^\alpha}\alpha[i]\beta[k+\lambda i],\text{ with }\lambda\in\mathbb{Z}^*
 $$
 If $k\notin \Omega_\gamma$, $\gamma[k]$ is unmodified.

 If *accumulate=false* then an erasing step $\gamma[k]=0,
 k\in\Omega_\gamma$ is performed before computation.

 If $\lambda=-1$ you compute a convolution, if $\lambda=+1$ you
 compute a cross-correlation.

 *Example:*
 #+BEGIN_SRC julia
 β=[1:15;];
 γ=ones(Int,15);
 α=LinearFilter([0,0,1],0);
 directConv!(α,1,β,γ,5:10);
 hcat([1:length(γ);],γ)'
 #+END_SRC
 #+BEGIN_SRC julia
 2×15 Array{Int64,2}:
  1  2  3  4  5  6  7   8   9  10  11  12  13  14  15
  1  1  1  1  7  8  9  10  11  12   1   1   1   1   1
 #+END_SRC
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::239][directConvolution.jl:239]], [[oZDHUwvU][back to index]]
 - @@latex:\phantomsection@@ *=directCrossCorrelation=*  <<HKnWx24U>>
 #+BEGIN_SRC julia :eval never :exports code
 function directCrossCorrelation(α::LinearFilter{T},
				 β::AbstractArray{T,1},

				 ::Type{LeftBE}=ZeroPaddingBE,
				 ::Type{RightBE}=ZeroPaddingBE) where {T <: Number,
								       LeftBE <: BoundaryExtension,
								       RightBE <: BoundaryExtension}
 #+END_SRC
 #+BEGIN_QUOTE
 Computes a cross-correlation 

 This is a convenience function where $\lambda=+1$

 *Returns:* $\gamma$ a created vector of length identical to the $\beta$ one.
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::361][directConvolution.jl:361]], [[oZDHUwvU][back to index]]
 :END:

** Savitzky-Golay Filters
#+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="SG_Filters",tag_to_ignore="Internal",header_level=0)
#+END_SRC

#+RESULTS:
:RESULTS:

<<m8FilkBK>> *Index:* *[S]* [[lfF6bmdI][SG_Filter]] *[f]* [[MWUDhB5h][filter]] *[l]* [[FL4jjspz][length]] *[m]* [[UTFeyCDD][maxDerivativeOrder]] *[p]* [[j2zfV1RA][polynomialOrder]] 
- @@latex:\phantomsection@@ *=SG_Filter=*  <<lfF6bmdI>>
#+BEGIN_SRC julia :eval never :exports code
struct SG_Filter{T<:AbstractFloat,N}
#+END_SRC
#+BEGIN_QUOTE
A structure to store Savitzky-Golay filters.
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/SG_Filter.jl::32][SG_Filter.jl:32]], [[m8FilkBK][back to index]]
 @@latex:\phantomsection@@  <<oaSkickLSG_Filters_Constructor>>
#+BEGIN_SRC julia :eval never :exports code
function SG_Filter(T::DataType=Float64;halfWidth::Int=5,degree::Int=2)
#+END_SRC
#+BEGIN_QUOTE
Creates a set of Savitzky-Golay filters

- filter length is 2*halfWidth+1
- polynomial degree is degree
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/SG_Filter.jl::57][SG_Filter.jl:57]], [[m8FilkBK][back to index]]
- @@latex:\phantomsection@@ *=filter=*  <<MWUDhB5h>>
#+BEGIN_SRC julia :eval never :exports code
filter(sg::SG_Filter{T,N};derivativeOrder::Int=0) where {T<:AbstractFloat,N}
#+END_SRC
#+BEGIN_QUOTE
Returns the filter to be used to compute the  smoothed derivatives of order *derivativeOrder*.
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/SG_Filter.jl::39][SG_Filter.jl:39]], [[m8FilkBK][back to index]]
- @@latex:\phantomsection@@ *=length=*  <<FL4jjspz>>
#+BEGIN_SRC julia :eval never :exports code
length(sg::SG_Filter{T,N}) where {T<:AbstractFloat,N}
#+END_SRC
#+BEGIN_QUOTE
Returns filter length, this is an odd number, see [[oaSkickLSG_Filters_Constructor][SG_Filter(...)]]
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/SG_Filter.jl::44][SG_Filter.jl:44]], [[m8FilkBK][back to index]]
- @@latex:\phantomsection@@ *=maxDerivativeOrder=*  <<UTFeyCDD>>
#+BEGIN_SRC julia :eval never :exports code
maxDerivativeOrder(sg::SG_Filter{T,N}) where {T<:AbstractFloat,N}
#+END_SRC
#+BEGIN_QUOTE
Maximum order of the smoothed derivatives we can compute with *sg*
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/SG_Filter.jl::48][SG_Filter.jl:48]], [[m8FilkBK][back to index]]
- @@latex:\phantomsection@@ *=polynomialOrder=*  <<j2zfV1RA>>
#+BEGIN_SRC julia :eval never :exports code
polynomialOrder(sg::SG_Filter{T,N}) where {T<:AbstractFloat,N}
#+END_SRC
#+BEGIN_QUOTE
Returns the degree of the polynomial used to construct the Savitzky-Golay filters, see [[oaSkickLSG_Filters_Constructor][SG_Filter(...)]].
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/SG_Filter.jl::53][SG_Filter.jl:53]], [[m8FilkBK][back to index]]
:END:

** Undecimated Wavelet Transform
*** UDWT Filters
 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="UDWT_Filter",tag_to_ignore="Internal",header_level=0,case_sensitive=true)
 #+END_SRC

 #+RESULTS:
 :RESULTS:

 <<EqWy1uYV>> *Index:* *[U]* [[6YchAWDS][UDWT_Filter]], [[lBzMNlyB][UDWT_Filter_Biorthogonal]], [[PJ92Wn2S][UDWT_Filter_Haar]], [[k4m8v7nq][UDWT_Filter_Starck2]] *[e]* [[rM1oP3fz][export]] *[t]* [[QUt0TgPH][tildeψ_filter]], [[qpHl982H][tildeψ_offset]], [[vWcFS8XB][tildeϕ_filter]], [[wmQwL9U3][tildeϕ_offset]] *[ψ]* [[lTKi3a3c][ψ_filter]], [[6NySDF5O][ψ_offset]] *[ϕ]* [[7k9pw1KS][ϕ_filter]], [[FFJj3HLR][ϕ_offset]] 
 - @@latex:\phantomsection@@ *=UDWT_Filter=*  <<6YchAWDS>>
 #+BEGIN_SRC julia :eval never :exports code
 abstract type UDWT_Filter{T<:Number} <: UDWT_Filter_Biorthogonal{T}
 #+END_SRC
 #+BEGIN_QUOTE
 A specialization of UDWT_Filter_Biorthogonal for *orthogonal* filters.


 For orthogonal filters we have: $\phi=\tilde{\phi}$ and $\psi=\tilde{\psi}$

 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::38][udwt.jl:38]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Biorthogonal=*  <<lBzMNlyB>>
 #+BEGIN_SRC julia :eval never :exports code
 abstract type UDWT_Filter_Biorthogonal{T<:Number} 
 #+END_SRC
 #+BEGIN_QUOTE
 Abstract type defining the $\phi$, $\psi$, $\tilde{\phi}$ and
 $\tilde{\psi}$ filters associated to an undecimated biorthogonal
 wavelet transform
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::12][udwt.jl:12]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Haar=*  <<PJ92Wn2S>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT_Filter_Haar{T<:AbstractFloat} <: UDWT_Filter{T}
 #+END_SRC
 #+BEGIN_QUOTE
 Haar filter
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::64][udwt.jl:64]], [[EqWy1uYV][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 UDWT_Filter_Haar{T}() where {T<:Real}
 #+END_SRC
 #+BEGIN_QUOTE
 Creates an instance
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::70][udwt.jl:70]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Starck2=*  <<k4m8v7nq>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT_Filter_Starck2{T<:AbstractFloat} <: UDWT_Filter_Biorthogonal{T}
 #+END_SRC
 #+BEGIN_QUOTE
 Starck2 filter

 Defined by Eq. 6 from http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4060954
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::78][udwt.jl:78]], [[EqWy1uYV][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 UDWT_Filter_Starck2{T}() where {T<:Real}
 #+END_SRC
 #+BEGIN_QUOTE
 Creates an instance
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::88][udwt.jl:88]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=export=*  <<rM1oP3fz>>
 #+BEGIN_SRC julia :eval never :exports code
 export UDWT_Filter_Haar, UDWT_Filter_Starck2
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::1][udwt.jl:1]], [[EqWy1uYV][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 export ϕ_filter,ψ_filter,tildeϕ_filter,tildeψ_filter,ϕ_offset,ψ_offset,tildeϕ_offset,tildeψ_offset
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::3][udwt.jl:3]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=tildeψ_filter=*  <<QUt0TgPH>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::25][udwt.jl:25]], [[EqWy1uYV][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_filter(c::UDWT_Filter)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::51][udwt.jl:51]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=tildeψ_offset=*  <<qpHl982H>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::33][udwt.jl:33]], [[EqWy1uYV][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_offset(c::UDWT_Filter)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::57][udwt.jl:57]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=tildeϕ_filter=*  <<vWcFS8XB>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::23][udwt.jl:23]], [[EqWy1uYV][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_filter(c::UDWT_Filter)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::48][udwt.jl:48]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=tildeϕ_offset=*  <<wmQwL9U3>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::31][udwt.jl:31]], [[EqWy1uYV][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_offset(c::UDWT_Filter)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::54][udwt.jl:54]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=ψ_filter=*  <<lTKi3a3c>>
 #+BEGIN_SRC julia :eval never :exports code
 ψ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::21][udwt.jl:21]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=ψ_offset=*  <<6NySDF5O>>
 #+BEGIN_SRC julia :eval never :exports code
 ψ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::29][udwt.jl:29]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=ϕ_filter=*  <<7k9pw1KS>>
 #+BEGIN_SRC julia :eval never :exports code
 ϕ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::19][udwt.jl:19]], [[EqWy1uYV][back to index]]
 - @@latex:\phantomsection@@ *=ϕ_offset=*  <<FFJj3HLR>>
 #+BEGIN_SRC julia :eval never :exports code
 ϕ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::27][udwt.jl:27]], [[EqWy1uYV][back to index]]
 :END:

*** UDWT Computational subroutines
 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
print_org_doc(documented_items,tag="UDWT",tag_to_ignore="Internal",header_level=0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 <<ToICCWYR>> *Index:* *[U]* [[qUNXcWU4][UDWT]] *[e]* [[SS38WCZs][export]] *[i]* [[0ynLw4XG][inverse_udwt]], [[RsWDCEyg][inverse_udwt!]] *[l]* [[3g4TxS8q][length]] *[s]* [[IlgqjsFQ][scale]] *[u]* [[TWuB0g0P][udwt]] 
 - @@latex:\phantomsection@@ *=UDWT=*  <<qUNXcWU4>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT{T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 A structure to store 1D UDWT
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::97][udwt.jl:97]], [[ToICCWYR][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 UDWT{T}(filter::UDWT_Filter_Biorthogonal{T};
	     n::Int=0,
	     scale::Int=0) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Creates an instance

 *Parameters:*
 - *filter*: used filter
 - *scale* : max scale
 - *n*: signal length
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::108][udwt.jl:108]], [[ToICCWYR][back to index]]
 - @@latex:\phantomsection@@ *=export=*  <<SS38WCZs>>
 #+BEGIN_SRC julia :eval never :exports code
 export udwt, scale, inverse_udwt!, inverse_udwt
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::5][udwt.jl:5]], [[ToICCWYR][back to index]]
 - @@latex:\phantomsection@@ *=inverse_udwt=*  <<0ynLw4XG>>
 #+BEGIN_SRC julia :eval never :exports code
 function inverse_udwt(udwt_domain::UDWT{T})::Array{T,1} where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D *inverse* undecimated wavelet transform

 *Returns:* a vector containing the reconstructed signal.
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::248][udwt.jl:248]], [[ToICCWYR][back to index]]
 - @@latex:\phantomsection@@ *=inverse_udwt!=*  <<RsWDCEyg>>
 #+BEGIN_SRC julia :eval never :exports code
 function inverse_udwt!(udwt_domain::UDWT{T},reconstructed_signal::AbstractArray{T,1}) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D *inverse* undecimated wavelet transform

 *Caveat:* uses a pre-allocated vector =reconstructed_signal=
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::191][udwt.jl:191]], [[ToICCWYR][back to index]]
 - @@latex:\phantomsection@@ *=length=*  <<3g4TxS8q>>
 #+BEGIN_SRC julia :eval never :exports code
 length(udwt::UDWT)::Int
 #+END_SRC
 #+BEGIN_QUOTE
 Returns expected signal length
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::127][udwt.jl:127]], [[ToICCWYR][back to index]]
 - @@latex:\phantomsection@@ *=scale=*  <<IlgqjsFQ>>
 #+BEGIN_SRC julia :eval never :exports code
 scale(udwt::UDWT)::Int
 #+END_SRC
 #+BEGIN_QUOTE
 Returns max scale
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::124][udwt.jl:124]], [[ToICCWYR][back to index]]
 - @@latex:\phantomsection@@ *=udwt=*  <<TWuB0g0P>>
 #+BEGIN_SRC julia :eval never :exports code
 function udwt(signal::AbstractArray{T,1},filter::UDWT_Filter_Biorthogonal{T};scale::Int=3) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D undecimated wavelet transform

 $$(\mathcal{W}_{j+1}f)[u]=(\bar{g}_j*\mathcal{V}_{j}f)[u]$$
 $$(\mathcal{V}_{j+1}f)[u]=(\bar{h}_j*\mathcal{V}_{j}f)[u]$$

 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::131][udwt.jl:131]], [[ToICCWYR][back to index]]
 :END:




* Unit tests

#+BEGIN_SRC julia :results output table :exports results
include("/home/picaud/GitHub/DirectConvolution.jl/test/runtests.jl")
#+END_SRC

#+RESULTS:
: Test Summary:     | Pass  Total
: DirectConvolution |   39     39

* Internal documentation



#+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="Internal",header_level=0,complete_link=true)
#+END_SRC

#+RESULTS:
:RESULTS:

<<ZDnfMVga>> *Index:* *[L]* [[hIpsUbQP][LinearFilter_Default]], [[qZjSTLlK][LinearFilter_DefaultCentered]] *[b]* [[PlrN2GSB][boundaryExtension]] *[c]* [[wDovzCe8][compute_Ωγ1]] *[d]* [[OfamqPNd][directConv!]] *[f]* [[epdCx22d][filter_range]] *[i]* [[mZ2yAt8X][isapprox]] *[o]* [[M1heJLxv][offset]] *[r]* [[x7yJRFRh][range]], [[1PlLgTgt][relativeComplement_left]], [[VjmNkI9c][relativeComplement_right]] *[s]* [[xXLmf8X4][scale]] 
- @@latex:\phantomsection@@ *=LinearFilter_Default=*  <<hIpsUbQP>>
#+BEGIN_SRC julia :eval never :exports code
struct LinearFilter_Default{T<:Number,N} <: LinearFilter{T}
#+END_SRC
#+BEGIN_QUOTE
Default linear filter
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::53][linearFilter.jl:53]], [[ZDnfMVga][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function LinearFilter_Default(c::AbstractArray{T,1},offset::Int)  where {T<:Number}
#+END_SRC
#+BEGIN_QUOTE
Creates a linear filter from a coefficient vector and its associated offset

*Example:*
#+BEGIN_SRC julia
linear_filter=LinearFilter(rand(3),5)
offset(linear_filter)
range(linear_filter)
#+END_SRC

#+RESULTS:
| -5 |
| -4 |
| -3 |

#+BEGIN_SRC julia
DirectConvolution.LinearFilter_Default{Float64,3}([0.94744, 0.760114, 0.289537], 5)
5
-5:-3
#+END_SRC

#+RESULTS:
| -5 |
| -4 |
| -3 |

#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::62][linearFilter.jl:62]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=LinearFilter_DefaultCentered=*  <<qZjSTLlK>>
#+BEGIN_SRC julia :eval never :exports code
struct LinearFilter_DefaultCentered{T<:Number,N} <: LinearFilter{T}
#+END_SRC
#+BEGIN_QUOTE
Default *centered* linear filter

Array length has to be odd, 2n+1. Filter offset is n by construction.
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::77][linearFilter.jl:77]], [[ZDnfMVga][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function LinearFilter_DefaultCentered(c::AbstractArray{T,1}) where {T<:Number}
#+END_SRC
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::87][linearFilter.jl:87]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=boundaryExtension=*  <<PlrN2GSB>>
#+BEGIN_SRC julia :eval never :exports code
function boundaryExtension(β::AbstractArray{T,1},
                           k::Int,
                           ::Type{ZeroPaddingBE}) where {T <: Number}
#+END_SRC
#+BEGIN_QUOTE
#+BEGIN_SRC julia
r=-5:10
hcat(r,map(x->DirectConvolution.boundaryExtension([1:3;],x,ZeroPaddingBE),r))'
#+END_SRC

#+RESULTS:
| -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
|  0 |  0 |  0 |  0 |  0 | 0 | 1 | 2 | 3 | 0 | 0 | 0 | 0 | 0 | 0 |  0 |

#+BEGIN_SRC julia
-5:10
2×16 Array{Int64,2}:
 -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10
  0   0   0   0   0  0  1  2  3  0  0  0  0  0  0   0
#+END_SRC

#+RESULTS:
| -5 |
| -4 |
| -3 |
| -2 |
| -1 |
|  0 |
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |

#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::109][directConvolution.jl:109]], [[ZDnfMVga][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function boundaryExtension(β::AbstractArray{T,1},
                           k::Int,
                           ::Type{ConstantBE}) where {T <: Number}
#+END_SRC
#+BEGIN_QUOTE
#+BEGIN_SRC julia
r=-5:10
hcat(r,map(x->DirectConvolution.boundaryExtension([1:3;],x,ConstantBE),r))'
#+END_SRC

#+RESULTS:
| -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
|  1 |  1 |  1 |  1 |  1 | 1 | 1 | 2 | 3 | 3 | 3 | 3 | 3 | 3 | 3 |  3 |

#+BEGIN_SRC julia
-5:10
2×16 Array{Int64,2}:
 -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10
  1   1   1   1   1  1  1  2  3  3  3  3  3  3  3   3
#+END_SRC

#+RESULTS:
| -5 |
| -4 |
| -3 |
| -2 |
| -1 |
|  0 |
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |

#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::127][directConvolution.jl:127]], [[ZDnfMVga][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function boundaryExtension(β::AbstractArray{T,1},
                           k::Int,
                           ::Type{PeriodicBE}) where {T <: Number}
#+END_SRC
#+BEGIN_QUOTE
#+BEGIN_SRC julia
r=-5:10
hcat(r,map(x->DirectConvolution.boundaryExtension([1:3;],x,PeriodicBE),r))'
#+END_SRC

#+RESULTS:
| -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
|  1 |  2 |  3 |  1 |  2 | 3 | 1 | 2 | 3 | 1 | 2 | 3 | 1 | 2 | 3 |  1 |

#+BEGIN_SRC julia
-5:10
2×16 Array{Int64,2}:
 -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10
  1   2   3   1   2  3  1  2  3  1  2  3  1  2  3   1
#+END_SRC

#+RESULTS:
| -5 |
| -4 |
| -3 |
| -2 |
| -1 |
|  0 |
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |

#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::147][directConvolution.jl:147]], [[ZDnfMVga][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function boundaryExtension(β::AbstractArray{T,1},
                           k::Int,
                           ::Type{MirrorBE}) where {T <: Number}
#+END_SRC
#+BEGIN_QUOTE
#+BEGIN_SRC julia
r=-5:10
hcat(r,map(x->DirectConvolution.boundaryExtension([1:3;],x,MirrorBE),r))'
#+END_SRC

#+RESULTS:
| -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
|  3 |  2 |  1 |  2 |  3 | 2 | 1 | 2 | 3 | 2 | 1 | 2 | 3 | 2 | 1 |  2 |

#+BEGIN_SRC julia
-5:10
2×16 Array{Int64,2}:
 -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10
  3   2   1   2   3  2  1  2  3  2  1  2  3  2  1   2
#+END_SRC

#+RESULTS:
| -5 |
| -4 |
| -3 |
| -2 |
| -1 |
|  0 |
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |

#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::161][directConvolution.jl:161]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=compute_Ωγ1=*  <<wDovzCe8>>
#+BEGIN_SRC julia :eval never :exports code
function compute_Ωγ1(Ωα::UnitRange{Int},
                     λ::Int,
                     Ωβ::UnitRange{Int})
#+END_SRC
#+BEGIN_QUOTE
In
$$
\gamma[k]=\sum\limits_{i\in\Omega^\alpha}\alpha[i]\beta[k+\lambda i],\text{ with }\lambda\in\mathbb{Z}^*
$$
the computation of $\gamma[k],\ k\in\Omega^\gamma$ is splitted into two parts:  
 - one part $\Omega^\gamma \cap \Omega^\gamma_1$ *free of boundary effect*,  
 - one part $\Omega^\gamma \setminus \Omega^\gamma_1$ *that requires boundary extension* $\tilde{\beta}=\Phi(\beta,k)$

*Example:*
#+BEGIN_SRC julia
DirectConvolution.compute_Ωγ1(-1:2,-2,1:20)
#+END_SRC

#+RESULTS:
|  5 |
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |
| 11 |
| 12 |
| 13 |
| 14 |
| 15 |
| 16 |
| 17 |
| 18 |

#+BEGIN_SRC julia
5:18
#+END_SRC

#+RESULTS:
|  5 |
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |
| 11 |
| 12 |
| 13 |
| 14 |
| 15 |
| 16 |
| 17 |
| 18 |

#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::47][directConvolution.jl:47]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=directConv!=*  <<OfamqPNd>>
#+BEGIN_SRC julia :eval never :exports code
function directConv!(tilde_α::AbstractArray{T,1},
                     α_offset::Int,
                     λ::Int,
                     β::AbstractArray{T,1},
                     γ::AbstractArray{T,1},
                     Ωγ::UnitRange{Int},
                     ::Type{LeftBE}=ZeroPaddingBE,
                     ::Type{RightBE}=ZeroPaddingBE;
                     accumulate::Bool=false)::Void where {T <: Number,
                                                          LeftBE <: BoundaryExtension,
                                                          RightBE <: BoundaryExtension}
#+END_SRC
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::178][directConvolution.jl:178]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=filter_range=*  <<epdCx22d>>
#+BEGIN_SRC julia :eval never :exports code
filter_range(size::Int,offset::Int)::UnitRange
#+END_SRC
#+BEGIN_QUOTE
Computes [[rFmRsnAWrange_filter][range(...)]] using primitive types.
This allows reuse by =directConv!= for instance.

*Caveat:* do not overload Base.range !!! 
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::28][linearFilter.jl:28]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=isapprox=*  <<mZ2yAt8X>>
#+BEGIN_SRC julia :eval never :exports code
function isapprox(f::LinearFilter{T},v::AbstractArray{T,1}) where {T<:Number}
#+END_SRC
#+BEGIN_QUOTE
For convenience only, used in utests
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::45][linearFilter.jl:45]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=offset=*  <<M1heJLxv>>
#+BEGIN_SRC julia :eval never :exports code
offset(f::LinearFilter_DefaultCentered{T,N}) where {T<:Number,N}
#+END_SRC
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::94][linearFilter.jl:94]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=range=*  <<x7yJRFRh>> <<rFmRsnAWrange_filter>>
#+BEGIN_SRC julia :eval never :exports code
range(c::LinearFilter)::UnitRange
#+END_SRC
#+BEGIN_QUOTE
Returns filter range $\Omega$

Filter support is defined by
$$
\Omega_\alpha = [ -\text{offset}(\alpha) , \text{size}(\alpha) -\text{offset}(\alpha)  - 1 ]
$$
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::36][linearFilter.jl:36]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=relativeComplement_left=*  <<1PlLgTgt>>
#+BEGIN_SRC julia :eval never :exports code
function relativeComplement_left(A::UnitRange{Int},
                                 B::UnitRange{Int})
#+END_SRC
#+BEGIN_QUOTE
Left relative complement

$$
(A\setminus B)_{\text{Left}}=[  l(A), \min{(u(A),l(B)-1)} ]
$$

*Example:*
#+BEGIN_SRC julia
DirectConvolution.relativeComplement_left(1:10,-5:5)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC julia
1:0
#+END_SRC

#+RESULTS:

$(A\setminus B)=\{6,7,8,9,10\}$ and the left part (elements that are
$\in A$ but on the left side of $B$) is *empty*.
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::69][directConvolution.jl:69]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=relativeComplement_right=*  <<VjmNkI9c>>
#+BEGIN_SRC julia :eval never :exports code
function relativeComplement_right(A::UnitRange{Int},
                                  B::UnitRange{Int})
#+END_SRC
#+BEGIN_QUOTE
Left relative complement

$$
(A\setminus B)_{\text{Right}}=[ \max{(l(A),u(B)+1)}, u(A) ]
$$

*Example:*
#+BEGIN_SRC julia
DirectConvolution.relativeComplement_right(1:10,-5:5)
#+END_SRC

#+RESULTS:
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |

#+BEGIN_SRC julia
6:10
#+END_SRC

#+RESULTS:
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |

$(A\setminus B)=\{6,7,8,9,10\}$ and the right part (elements that are
$\in A$ but on the right side of $B$) is $\{6,7,8,9,10\}$
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::88][directConvolution.jl:88]], [[ZDnfMVga][back to index]]
- @@latex:\phantomsection@@ *=scale=*  <<xXLmf8X4>>
#+BEGIN_SRC julia :eval never :exports code
function scale(λ::Int,Ω::UnitRange{Int})
#+END_SRC
#+BEGIN_QUOTE
Range scaling

*Caveat:*
We do not use Julia =*= operator as it returns a step range:
#+BEGIN_SRC julia
r=6:8
-2*r
#+END_SRC

#+RESULTS:

#+BEGIN_SRC julia
6:8
-12:-2:-16
#+END_SRC

#+RESULTS:
| -12 |
| -14 |
| -16 |

What we need is:
#+BEGIN_SRC julia
scale(-2,r)
#+END_SRC

#+RESULTS:
| -16 |
| -15 |
| -14 |
| -13 |
| -12 |

#+BEGIN_SRC julia
-16:-12
#+END_SRC

#+RESULTS:
| -16 |
| -15 |
| -14 |
| -13 |
| -12 |

#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::30][directConvolution.jl:30]], [[ZDnfMVga][back to index]]
:END:
