#+SETUPFILE: ./Setup/setupFile.org
#+TITLE: Direct Convolution Package
#+PROPERTY: header-args:julia :session *directConvolution_session*  :exports code :eval no-export
#+LATEX_HEADER: \usepackage{stmaryrd}

#+BEGIN_EXPORT latex
\definecolor{bg}{rgb}{0.95,0.95,0.95}
\setminted[]{
  bgcolor=bg,
  breaklines=true,
  breakanywhere=true,
  mathescape,
  fontsize=\footnotesize}
#+END_EXPORT

#+BEGIN_SRC julia :exports none
using Revise
using DirectConvolution
using J4Org

initialize_boxing_module(usedModules=["DirectConvolution"])
#+END_SRC

#+RESULTS:

* Introduction

This package goal is to compute convolution products 

\begin{equation}
\label{eq:main}
\gamma[k]=\sum\limits_{i\in\Omega^\alpha}\alpha[i]\beta[k+\lambda i],\text{ with }\lambda\in\mathbb{Z}^*
\end{equation}

using direct (no FFT) methods. 

* API documentation
** Linear Filter

#+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="LinearFilter",tag_to_ignore="Internal",header_level=0)
#+END_SRC

#+RESULTS:
:RESULTS:

<<F2rxtIOp>> *Index:* *[L]* [[RKJ3Pz2g][LinearFilter]] *[f]* [[z4ukgWRH][fcoef]] *[l]* [[CiJrtViN][length]] *[o]* [[cUuRpMHB][offset]] *[r]* [[DYU9gnBu][range]] 
- @@latex:\phantomsection@@ *=LinearFilter=*  <<RKJ3Pz2g>> <<x8gxcBKtLinearFilter>>
#+BEGIN_SRC julia :eval never :exports code
abstract type LinearFilter{T<:Number} 
#+END_SRC
#+BEGIN_QUOTE
Abstract type defining a linear filter. A linear filter is defined by its coefficients and by its domain
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::7][linearFilter.jl:7]], [[F2rxtIOp][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function LinearFilter(c::AbstractArray{T,1},offset::Int)::LinearFilter  where {T}
#+END_SRC
#+BEGIN_QUOTE
Creates a linear filter from its coefficients and an offset

The *offset* is the position of the filter coefficient to be aligned with zero, see [[x8gxcBKtrange_filter][range(...)]].

*Example:*
#+BEGIN_SRC julia
f=LinearFilter([0:5;],4);
hcat([range(f);],fcoef(f))
#+END_SRC
#+BEGIN_SRC julia
6×2 Array{Int64,2}:
 -4  0
 -3  1
 -2  2
 -1  3
  0  4
  1  5
#+END_SRC
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::95][linearFilter.jl:95]], [[F2rxtIOp][back to index]]

#+BEGIN_SRC julia :eval never :exports code
function LinearFilter(c::AbstractArray{T,1})::LinearFilter  where {T}
#+END_SRC
#+BEGIN_QUOTE
Create a centered linear filter, it must have an odd number, $2n+1$
of coefficients and is centered (offset=n)

*Example:*
#+BEGIN_SRC julia
f=LinearFilter([0:4;]);
hcat([range(f);],fcoef(f))
#+END_SRC
#+BEGIN_SRC julia
5×2 Array{Int64,2}:
 -2  0
 -1  1
  0  2
  1  3
  2  4
#+END_SRC
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::109][linearFilter.jl:109]], [[F2rxtIOp][back to index]]
- @@latex:\phantomsection@@ *=fcoef=*  <<z4ukgWRH>>
#+BEGIN_SRC julia :eval never :exports code
fcoef(c::LinearFilter)
#+END_SRC
#+BEGIN_QUOTE
Returns filter coefficients
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::13][linearFilter.jl:13]], [[F2rxtIOp][back to index]]
- @@latex:\phantomsection@@ *=length=*  <<CiJrtViN>>
#+BEGIN_SRC julia :eval never :exports code
length(c::LinearFilter)::Int
#+END_SRC
#+BEGIN_QUOTE
Returns filter length
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::17][linearFilter.jl:17]], [[F2rxtIOp][back to index]]
- @@latex:\phantomsection@@ *=offset=*  <<cUuRpMHB>>
#+BEGIN_SRC julia :eval never :exports code
offset(c::LinearFilter)::Int
#+END_SRC
#+BEGIN_QUOTE
Returns filter offset

*Caveat:* the first position is *0* (and not *1*)

See: [[x8gxcBKtrange_filter][range(...)]]
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::20][linearFilter.jl:20]], [[F2rxtIOp][back to index]]
- @@latex:\phantomsection@@ *=range=*  <<DYU9gnBu>> <<x8gxcBKtrange_filter>>
#+BEGIN_SRC julia :eval never :exports code
range(c::LinearFilter)::UnitRange
#+END_SRC
#+BEGIN_QUOTE
Returns filter range $\Omega$

Filter support is defined by
$$
\Omega_\alpha = [ -\text{offset}(\alpha) , \text{size}(\alpha) -\text{offset}(\alpha)  - 1 ]
$$
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::27][linearFilter.jl:27]], [[F2rxtIOp][back to index]]
:END:

** Undecimated Wavelet Transform
*** UDWT Filters
 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="UDWT_Filter",header_level=0,case_sensitive=true)
 #+END_SRC

 #+RESULTS:
 :RESULTS:

 <<xaRBzB5c>> *Index:* *[U]* [[NoS94uOz][UDWT_Filter]], [[KYpPvL6q][UDWT_Filter_Biorthogonal]], [[oLZwmcOU][UDWT_Filter_Haar]], [[iBHOSEqp][UDWT_Filter_Starck2]] *[e]* [[LynNg4RT][export]] *[t]* [[jkCXR2uw][tildeψ_filter]], [[dZleLxYY][tildeψ_offset]], [[l1dxvaQT][tildeϕ_filter]], [[vQ2cocbW][tildeϕ_offset]] *[ψ]* [[QXjk7AW2][ψ_filter]], [[wbWhrVcA][ψ_offset]] *[ϕ]* [[0bJoJHh8][ϕ_filter]], [[UmzuA3lh][ϕ_offset]] 
 - @@latex:\phantomsection@@ *=UDWT_Filter=*  <<NoS94uOz>>
 #+BEGIN_SRC julia :eval never :exports code
 abstract type UDWT_Filter{T<:Number} <: UDWT_Filter_Biorthogonal{T}
 #+END_SRC
 #+BEGIN_QUOTE
 A specialization of UDWT_Filter_Biorthogonal for *orthogonal* filters.


 For orthogonal filters we have: $\phi=\tilde{\phi}$ and $\psi=\tilde{\psi}$

 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::40][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Biorthogonal=*  <<KYpPvL6q>>
 #+BEGIN_SRC julia :eval never :exports code
 abstract type UDWT_Filter_Biorthogonal{T<:Number} 
 #+END_SRC
 #+BEGIN_QUOTE
 Abstract type defining the $\phi$, $\psi$, $\tilde{\phi}$ and
 $\tilde{\psi}$ filters associated to an undecimated biorthogonal
 wavelet transform

 - [X] TODO must use LinearFilter struct 
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::12][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Haar=*  <<oLZwmcOU>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT_Filter_Haar{T<:AbstractFloat} <: UDWT_Filter{T}
 #+END_SRC
 #+BEGIN_QUOTE
 Haar filter
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::66][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 UDWT_Filter_Haar{T}() where {T<:Real}
 #+END_SRC
 #+BEGIN_QUOTE
 Creates an instance
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::72][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Starck2=*  <<iBHOSEqp>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT_Filter_Starck2{T<:AbstractFloat} <: UDWT_Filter_Biorthogonal{T}
 #+END_SRC
 #+BEGIN_QUOTE
 Starck2 filter

 Defined by Eq. 6 from http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4060954
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::80][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 UDWT_Filter_Starck2{T}() where {T<:Real}
 #+END_SRC
 #+BEGIN_QUOTE
 Creates an instance
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::90][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=export=*  <<LynNg4RT>>
 #+BEGIN_SRC julia :eval never :exports code
 export UDWT_Filter_Haar, UDWT_Filter_Starck2
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::1][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 export ϕ_filter,ψ_filter,tildeϕ_filter,tildeψ_filter,ϕ_offset,ψ_offset,tildeϕ_offset,tildeψ_offset
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::3][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=tildeψ_filter=*  <<jkCXR2uw>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::27][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_filter(c::UDWT_Filter)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::53][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=tildeψ_offset=*  <<dZleLxYY>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::35][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_offset(c::UDWT_Filter)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::59][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=tildeϕ_filter=*  <<l1dxvaQT>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::25][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_filter(c::UDWT_Filter)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::50][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=tildeϕ_offset=*  <<vQ2cocbW>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::33][udwt.jl]], [[xaRBzB5c][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_offset(c::UDWT_Filter)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::56][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=ψ_filter=*  <<QXjk7AW2>>
 #+BEGIN_SRC julia :eval never :exports code
 ψ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::23][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=ψ_offset=*  <<wbWhrVcA>>
 #+BEGIN_SRC julia :eval never :exports code
 ψ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::31][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=ϕ_filter=*  <<0bJoJHh8>>
 #+BEGIN_SRC julia :eval never :exports code
 ϕ_filter(c::UDWT_Filter_Biorthogonal)::LinearFilter
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::21][udwt.jl]], [[xaRBzB5c][back to index]]
 - @@latex:\phantomsection@@ *=ϕ_offset=*  <<UmzuA3lh>>
 #+BEGIN_SRC julia :eval never :exports code
 ϕ_offset(c::UDWT_Filter_Biorthogonal)::Int
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::29][udwt.jl]], [[xaRBzB5c][back to index]]
 :END:

*** UDWT Computational subroutines
 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
print_org_doc(documented_items,tag="UDWT",header_level=0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 <<xEAKMX0V>> *Index:* *[E]* [[ZHmsiJXm][export]] *[I]* [[hUsYWLnJ][inverse_udwt]], [[5WeMqHTM][inverse_udwt!]] *[L]* [[h3KB6ht7][length]] *[S]* [[UwUrMPRU][scale]] *[U]* [[iNcRdmm0][UDWT]], [[4Zu0SIpi][udwt]] 
 - @@latex:\phantomsection@@ *=export=*  <<ZHmsiJXm>>
 #+BEGIN_SRC julia :eval never :exports code
 export udwt, scale, inverse_udwt!, inverse_udwt
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::5][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=inverse_udwt=*  <<hUsYWLnJ>>
 #+BEGIN_SRC julia :eval never :exports code
 function inverse_udwt(udwt_domain::UDWT{T})::Array{T,1} where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D *inverse* undecimated wavelet transform

 *Returns:* a vector containing the reconstructed signal.
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::250][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=inverse_udwt!=*  <<5WeMqHTM>>
 #+BEGIN_SRC julia :eval never :exports code
 function inverse_udwt!(udwt_domain::UDWT{T},reconstructed_signal::AbstractArray{T,1}) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D *inverse* undecimated wavelet transform

 *Caveat:* uses a pre-allocated vector =reconstructed_signal=
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::193][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=length=*  <<h3KB6ht7>>
 #+BEGIN_SRC julia :eval never :exports code
 length(udwt::UDWT)::Int
 #+END_SRC
 #+BEGIN_QUOTE
 Returns expected signal length
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::129][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=scale=*  <<UwUrMPRU>>
 #+BEGIN_SRC julia :eval never :exports code
 scale(udwt::UDWT)::Int
 #+END_SRC
 #+BEGIN_QUOTE
 Returns max scale
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::126][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=UDWT=*  <<iNcRdmm0>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT{T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 A structure to store 1D UDWT
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::99][udwt.jl]], [[xEAKMX0V][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 UDWT{T}(filter::UDWT_Filter_Biorthogonal{T};
	     n::Int=0,
	     scale::Int=0) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Creates an instance

 *Parameters:*
 - *filter*: used filter
 - *scale* : max scale
 - *n*: signal length
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::110][udwt.jl]], [[xEAKMX0V][back to index]]
 - @@latex:\phantomsection@@ *=udwt=*  <<4Zu0SIpi>>
 #+BEGIN_SRC julia :eval never :exports code
 function udwt(signal::AbstractArray{T,1},filter::UDWT_Filter_Biorthogonal{T};scale::Int=3) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D undecimated wavelet transform

 $$(\mathcal{W}_{j+1}f)[u]=(\bar{g}_j*\mathcal{V}_{j}f)[u]$$
 $$(\mathcal{V}_{j+1}f)[u]=(\bar{h}_j*\mathcal{V}_{j}f)[u]$$

 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::133][udwt.jl]], [[xEAKMX0V][back to index]]
 :END:

** Convolution functions

These are the main functions of the package, allowing to compute Eq. \ref{eq:main}.

 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
print_org_doc(documented_items,tag="Convolution",header_level=0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:

 <<8ksk8XaL>> *Index:* *[D]* [[kE22PTR0][directConv]], [[bcs9VN9O][directConv!]] 
 - @@latex:\phantomsection@@ *=directConv=*  <<kE22PTR0>>
 #+BEGIN_SRC julia :eval never :exports code
 function directConv(tilde_α::AbstractArray{T,1},
		     α_offset::Int64,
		     λ::Int64,

		     β::AbstractArray{T,1},

		     ::Type{LeftBE}=ZeroPaddingBE,
		     ::Type{RightBE}=ZeroPaddingBE) where {T <: Number,
							   LeftBE <: BoundaryExtension,
							   RightBE <: BoundaryExtension}
 #+END_SRC
 #+BEGIN_QUOTE
 Computes a convolution.

 Returns γ, a created vector of length identical to β one.
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::242][directConvolution.jl]], [[8ksk8XaL][back to index]]
 - @@latex:\phantomsection@@ *=directConv!=*  <<bcs9VN9O>>
 #+BEGIN_SRC julia :eval never :exports code
 function directConv!(tilde_α::AbstractArray{T,1},
		      α_offset::Int,
		      λ::Int,

		      β::AbstractArray{T,1},

		      γ::AbstractArray{T,1},
		      Ωγ::UnitRange{Int},

		      ::Type{LeftBE}=ZeroPaddingBE,
		      ::Type{RightBE}=ZeroPaddingBE;

		      accumulate::Bool=false) where {T <: Number,
						     LeftBE <: BoundaryExtension,
						     RightBE <: BoundaryExtension}
 #+END_SRC
 #+BEGIN_QUOTE
 Computes a convolution.

 Inplace modification of γ
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::164][directConvolution.jl]], [[8ksk8XaL][back to index]]

 #+BEGIN_SRC julia :eval never :exports code
 function directConv!(α::LinearFilter{T},
		      λ::Int,

		      β::AbstractArray{T,1},

		      γ::AbstractArray{T,1},
		      Ωγ::UnitRange{Int},

		      ::Type{LeftBE}=ZeroPaddingBE,
		      ::Type{RightBE}=ZeroPaddingBE;

		      accumulate::Bool=false) where {T <: Number,
						     LeftBE <: BoundaryExtension,
						     RightBE <: BoundaryExtension}
 #+END_SRC
 #+BEGIN_QUOTE
 Computes a convolution.

 Takes a filter as input 

 Inplace modification of γ
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/directConvolution.jl::202][directConvolution.jl]], [[8ksk8XaL][back to index]]
 :END:

* TODO [0/1]
- [ ] add example with derivative taking X into account

