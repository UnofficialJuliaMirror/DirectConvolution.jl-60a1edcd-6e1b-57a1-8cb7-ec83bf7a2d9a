#+SETUPFILE: ./Setup/setupFile.org
#+TITLE: Direct Convolution Package
#+PROPERTY: header-args:julia :session *directConvolution_session*  :exports code :eval no-export


#+BEGIN_EXPORT latex
\definecolor{bg}{rgb}{0.95,0.95,0.95}
\setminted[]{
  bgcolor=bg,
  breaklines=true,
  breakanywhere=true,
  mathescape,
  fontsize=\footnotesize}
#+END_EXPORT

#+BEGIN_SRC julia :exports none
using Plots
using Revise
using DirectConvolution
using J4Org

documented_items=create_documented_item_array_dir("~/GitHub/DirectConvolution.jl/src/");
#+END_SRC

#+RESULTS:

* Introduction
#+INDEX: Test

*Under construction do not use!*

This package goal is to compute convolution products 

\begin{equation}
\label{eq:main}
\gamma[k]=\sum\limits_{i\in\Omega^\alpha}\alpha[i]\beta[k+\lambda i],\text{ with }\lambda\in\mathbb{Z}^*
\end{equation}

using direct (no FFT) methods. 

Eq. \ref{eq:main} has several applications:
- [[id:e51770f6-45da-4051-b6ab-d0835187f438][Savitzky-Golay filters]] 
- [[id:32475da6-a0b9-4103-a58f-04eebdb75785][Undecimated Wavelet Transform]]

* Usage examples

Our dependencies are as follows:

#+BEGIN_SRC julia
using DirectConvolution
using Plots
#+END_SRC

#+RESULTS:

We also need to load a toy signal:
#+BEGIN_SRC julia :results output 
signal=readcsv("./data/signal_1.csv");
#+END_SRC

#+RESULTS:

For the moment we ignore the first column (X-axis) and only consider Y-values

#+BEGIN_SRC julia :results output 
signal=signal[:,2];
#+END_SRC

#+RESULTS:

** Savitzky-Golay filters
   :PROPERTIES:
   :ID:       e51770f6-45da-4051-b6ab-d0835187f438
   :END:

Creates a set of Savitzky-Golay filters, window width is $11=2*5+1$ and polynomial degree is $3$.

#+BEGIN_SRC julia 
sg = SG_Filter(Float64,halfWidth=5,degree=3);
#+END_SRC

#+RESULTS:

This can be checked with

#+BEGIN_SRC julia :exports both :wrap "SRC julia :exports code :eval never" :results output
length(sg)
polynomialOrder(sg)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC julia :exports code :eval never
11
3
#+END_SRC

Savitzky-Golay filters can be used to smooth or to compute smoothed
derivatives of a signal. The associated filter is obtained thanks to
the =filter= function.

#+BEGIN_SRC julia :exports both :wrap "SRC julia :exports code :eval never" :results output
filter(sg,derivativeOrder=2)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC julia :exports code :eval never
DirectConvolution.LinearFilter_DefaultCentered{Float64,11}([0.034965, 0.013986, -0.002331, -0.013986, -0.020979, -0.02331, -0.020979, -0.013986, -0.002331, 0.013986, 0.034965])
#+END_SRC

Maximum derivative order is equal to the polynomial order, however there is a dedicated function:

#+BEGIN_SRC julia :exports both :wrap "SRC julia :exports code :eval never" :results output
maxDerivativeOrder(sg)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC julia :exports code :eval never
3
#+END_SRC


Smoothing example:

#+BEGIN_SRC julia
smoothed=directConv(filter(sg,derivativeOrder=0),signal,ConstantBE,ConstantBE)

plot(signal,label="signal")
plot!(smoothed, label="smoothed",linewidth=2)
plot!(signal-smoothed, label="residue")
#+END_SRC

#+RESULTS:


#+BEGIN_SRC julia :results graphics :file figures/sg.png :exports results
savefig("figures/sg.png")
#+END_SRC

#+ATTR_HTML: :align center :width 600px
#+CAPTION: Savitzky-Golay smoothing
#+RESULTS:
[[file:figures/sg.png]]


Smoothed first order derivative example:

#+BEGIN_SRC julia
smoothed_d1 = directConv(filter(sg,derivativeOrder=1),signal)

plot(signal,label="signal")
plot!(smoothed_d1, label="smoothed derivative",linewidth=2)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC julia :results graphics :file figures/sg_d1.png :exports results
savefig("figures/sg_d1.png")
#+END_SRC


#+ATTR_HTML: :align center :width 600px
#+CAPTION: Savitzky-Golay smoothed first order derivative
#+RESULTS:
[[file:figures/sg_d1.png]]


** Undecimated Wavelet Transform
   :PROPERTIES:
   :ID:       32475da6-a0b9-4103-a58f-04eebdb75785
   :END:
   
* API documentation

** Linear Filter

#+BEGIN_SRC julia :results output drawer :eval no-export :exports results
print_org_doc(documented_items,tag="LinearFilter",header_level=0)
#+END_SRC

#+RESULTS:
:RESULTS:
<<mjpkhS2f>> *Index:* *[L]* [[2hnYs7Sa][LinearFilter_Default]], [[H4MbBa5H][LinearFilter_DefaultCentered]] *[O]* [[ey7vY1tt][offset]] 
- @@latex:\phantomsection@@ *=LinearFilter_Default=*  <<2hnYs7Sa>>
#+BEGIN_SRC julia :eval never :exports code
struct LinearFilter_Default{T<:AbstractFloat,N} <: LinearFilter{T}
#+END_SRC
#+BEGIN_QUOTE
Default linear filter
#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::28][linearFilter.jl]], [[mjpkhS2f][back to index]]
- @@latex:\phantomsection@@ *=LinearFilter_DefaultCentered=*  <<H4MbBa5H>>
#+BEGIN_SRC julia :eval never :exports code
struct LinearFilter_DefaultCentered{T<:AbstractFloat,N} <: LinearFilter{T}
#+END_SRC
#+BEGIN_QUOTE
Default centered linear filter, size = 2n+1

#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::41][linearFilter.jl]], [[mjpkhS2f][back to index]]
#+BEGIN_SRC julia :eval never :exports code
function LinearFilter_DefaultCentered(c::Array{T}) where {T<:AbstractFloat}
#+END_SRC
#+BEGIN_QUOTE
Creates a centered linear filter from an array of size = 2n+1

#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::48][linearFilter.jl]], [[mjpkhS2f][back to index]]
- @@latex:\phantomsection@@ *=offset=*  <<ey7vY1tt>>
#+BEGIN_SRC julia :eval never :exports code
offset(f::LinearFilter_DefaultCentered{T,N}) where {T<:AbstractFloat,N}
#+END_SRC
#+BEGIN_QUOTE
Returns offset, if size = 2n+1 then offset = n

#+END_QUOTE
[[file:/home/picaud/GitHub/DirectConvolution.jl/src/linearFilter.jl::57][linearFilter.jl]], [[mjpkhS2f][back to index]]
:END:

** Undecimated Wavelet Transform

*** UDWT Filters
 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
print_org_doc(documented_items,tag="UDWT_Filter",header_level=0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 <<r0WslEDx>> *Index:* *[T]* [[rfo4PFbW][tildeϕ_filter]], [[engoIXXt][tildeϕ_offset]], [[ngvUhNuD][tildeψ_filter]], [[opKzNoTS][tildeψ_offset]] *[U]* [[B972MHzi][UDWT_Filter]], [[s3EohaL7][UDWT_Filter_Biorthogonal]], [[htng0l6T][UDWT_Filter_Haar]], [[jbTdCTF3][UDWT_Filter_Starck2]] *[Φ]* [[9az4CGp7][ϕ_filter]], [[FbXMEcAB][ϕ_offset]] *[Ψ]* [[W9a5Utay][ψ_filter]], [[UhcmJ1Vs][ψ_offset]] 
 - @@latex:\phantomsection@@ *=tildeϕ_filter=*  <<rfo4PFbW>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_filter(c::UDWT_Filter_Biorthogonal)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::20][udwt.jl]], [[r0WslEDx][back to index]]
 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_filter(c::UDWT_Filter)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::43][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=tildeϕ_offset=*  <<engoIXXt>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_offset(c::UDWT_Filter_Biorthogonal)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::28][udwt.jl]], [[r0WslEDx][back to index]]
 #+BEGIN_SRC julia :eval never :exports code
 tildeϕ_offset(c::UDWT_Filter)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::47][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=tildeψ_filter=*  <<ngvUhNuD>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_filter(c::UDWT_Filter_Biorthogonal)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::22][udwt.jl]], [[r0WslEDx][back to index]]
 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_filter(c::UDWT_Filter)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::45][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=tildeψ_offset=*  <<opKzNoTS>>
 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_offset(c::UDWT_Filter_Biorthogonal)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::30][udwt.jl]], [[r0WslEDx][back to index]]
 #+BEGIN_SRC julia :eval never :exports code
 tildeψ_offset(c::UDWT_Filter)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::49][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter=*  <<B972MHzi>>
 #+BEGIN_SRC julia :eval never :exports code
 abstract type UDWT_Filter{T<:Number} <: UDWT_Filter_Biorthogonal{T}
 #+END_SRC
 #+BEGIN_QUOTE
 A specialization of UDWT_Filter_Biorthogonal for *orthogonal* filters.


 For orthogonal filters we have: $\phi=\tilde{\phi}$ and $\psi=\tilde{\psi}$

 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::33][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Biorthogonal=*  <<s3EohaL7>>
 #+BEGIN_SRC julia :eval never :exports code
 abstract type UDWT_Filter_Biorthogonal{T<:Number} 
 #+END_SRC
 #+BEGIN_QUOTE
 Abstract type defining the $\phi$, $\psi$, $\tilde{\phi}$ and
 $\tilde{\psi}$ filters associated to an undecimated biorthogonal
 wavelet transform

 - [ ] TODO must use LinearFilter struct
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::7][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Haar=*  <<htng0l6T>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT_Filter_Haar{T<:AbstractFloat} <: UDWT_Filter{T}
 #+END_SRC
 #+BEGIN_QUOTE
 Haar filter
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::54][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=UDWT_Filter_Starck2=*  <<jbTdCTF3>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT_Filter_Starck2{T<:AbstractFloat} <: UDWT_Filter_Biorthogonal{T}
 #+END_SRC
 #+BEGIN_QUOTE
 Starck2 filter

 Defined by Eq. 6 from http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4060954
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::70][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=ϕ_filter=*  <<9az4CGp7>>
 #+BEGIN_SRC julia :eval never :exports code
 ϕ_filter(c::UDWT_Filter_Biorthogonal)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::16][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=ϕ_offset=*  <<FbXMEcAB>>
 #+BEGIN_SRC julia :eval never :exports code
 ϕ_offset(c::UDWT_Filter_Biorthogonal)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::24][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=ψ_filter=*  <<W9a5Utay>>
 #+BEGIN_SRC julia :eval never :exports code
 ψ_filter(c::UDWT_Filter_Biorthogonal)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::18][udwt.jl]], [[r0WslEDx][back to index]]
 - @@latex:\phantomsection@@ *=ψ_offset=*  <<UhcmJ1Vs>>
 #+BEGIN_SRC julia :eval never :exports code
 ψ_offset(c::UDWT_Filter_Biorthogonal)
 #+END_SRC
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::26][udwt.jl]], [[r0WslEDx][back to index]]
 :END:

*** UDWT Computational subroutines
 #+BEGIN_SRC julia :results output drawer :eval no-export :exports results
print_org_doc(documented_items,tag="UDWT",header_level=0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 <<Oou521Tf>> *Index:* *[I]* [[vFVTfVsf][inverse_udwt]], [[CjsihxFm][inverse_udwt!]] *[L]* [[ud5ZKljn][length]] *[S]* [[ZjybEwvU][scale]] *[U]* [[IB0jWrJV][UDWT]], [[h0Ziwuvo][udwt]] 
 - @@latex:\phantomsection@@ *=inverse_udwt=*  <<vFVTfVsf>>
 #+BEGIN_SRC julia :eval never :exports code
 function inverse_udwt(udwt_domain::UDWT{T})::Array{T,1} where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D *inverse* undecimated wavelet transform

 *Returns:* a vector containing the reconstructed signal.
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::242][udwt.jl]], [[Oou521Tf][back to index]]
 - @@latex:\phantomsection@@ *=inverse_udwt!=*  <<CjsihxFm>>
 #+BEGIN_SRC julia :eval never :exports code
 function inverse_udwt!(udwt_domain::UDWT{T},reconstructed_signal::AbstractArray{T,1}) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D *inverse* undecimated wavelet transform

 *Caveat:* uses a pre-allocated vector =reconstructed_signal=
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::183][udwt.jl]], [[Oou521Tf][back to index]]
 - @@latex:\phantomsection@@ *=length=*  <<ud5ZKljn>>
 #+BEGIN_SRC julia :eval never :exports code
 length(udwt::UDWT)::Int
 #+END_SRC
 #+BEGIN_QUOTE
 Returns initial signal length
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::117][udwt.jl]], [[Oou521Tf][back to index]]
 - @@latex:\phantomsection@@ *=scale=*  <<ZjybEwvU>>
 #+BEGIN_SRC julia :eval never :exports code
 scale(udwt::UDWT)::Int
 #+END_SRC
 #+BEGIN_QUOTE
 Returns max scale
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::114][udwt.jl]], [[Oou521Tf][back to index]]
 - @@latex:\phantomsection@@ *=UDWT=*  <<IB0jWrJV>>
 #+BEGIN_SRC julia :eval never :exports code
 struct UDWT{T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 A structure to store 1D UDWT
 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::95][udwt.jl]], [[Oou521Tf][back to index]]
 - @@latex:\phantomsection@@ *=udwt=*  <<h0Ziwuvo>>
 #+BEGIN_SRC julia :eval never :exports code
 function udwt(signal::AbstractArray{T,1},filter::UDWT_Filter_Biorthogonal{T};scale::Int=3) where {T<:Number}
 #+END_SRC
 #+BEGIN_QUOTE
 Performs an 1D undecimated wavelet transform

 $$(\mathcal{W}_{j+1}f)[u]=(\bar{g}_j*\mathcal{V}_{j}f)[u]$$
 $$(\mathcal{V}_{j+1}f)[u]=(\bar{h}_j*\mathcal{V}_{j}f)[u]$$

 #+END_QUOTE
 [[file:/home/picaud/GitHub/DirectConvolution.jl/src/udwt.jl::121][udwt.jl]], [[Oou521Tf][back to index]]
 :END:

** Convolution functions

These are the main functions of the package, allowing to compute Eq. \ref{eq:main}.


* UTest

#+BEGIN_SRC julia :results output table :exports results
include("../test/runtests.jl")
#+END_SRC

#+RESULTS:
: Test Summary:     | Pass  Total
: DirectConvolution |   35     35


* TODO [0/1]
- [ ] add example with derivative taking X into account

